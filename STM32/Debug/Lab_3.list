
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d18  08002d18  00012d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d38  08002d38  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002d38  08002d38  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d38  08002d38  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000048  08002d88  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002d88  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e4d  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c5  00000000  00000000  00028ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002b290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168bf  00000000  00000000  0002bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad53  00000000  00000000  0004246f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821ff  00000000  00000000  0004d1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf3c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002834  00000000  00000000  000cf414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d00 	.word	0x08002d00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002d00 	.word	0x08002d00

0800014c <MODE_PRESSED>:

int MODE_flag = 0;
int TIME_flag = 0;
int SET_flag = 0;

int MODE_PRESSED() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (MODE_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <MODE_PRESSED+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <MODE_PRESSED+0x16>
		MODE_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <MODE_PRESSED+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <MODE_PRESSED+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000064 	.word	0x20000064

08000170 <TIME_PRESSED>:

int TIME_PRESSED() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (TIME_flag == 1) {
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <TIME_PRESSED+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <TIME_PRESSED+0x16>
		TIME_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <TIME_PRESSED+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <TIME_PRESSED+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000068 	.word	0x20000068

08000194 <SET_PRESSED>:

int SET_PRESSED() {
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (SET_flag == 1) {
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <SET_PRESSED+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <SET_PRESSED+0x16>
		SET_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <SET_PRESSED+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <SET_PRESSED+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000006c 	.word	0x2000006c

080001b8 <setKeyReg2>:


void setKeyReg2(int i) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if (i == 0) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d10a      	bne.n	80001dc <setKeyReg2+0x24>
 80001c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ca:	4814      	ldr	r0, [pc, #80]	; (800021c <setKeyReg2+0x64>)
 80001cc:	f001 fd58 	bl	8001c80 <HAL_GPIO_ReadPin>
 80001d0:	4603      	mov	r3, r0
 80001d2:	4619      	mov	r1, r3
 80001d4:	4a12      	ldr	r2, [pc, #72]	; (8000220 <setKeyReg2+0x68>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_TIME_GPIO_Port, BUTTON_TIME_Pin);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d10a      	bne.n	80001f8 <setKeyReg2+0x40>
 80001e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e6:	480d      	ldr	r0, [pc, #52]	; (800021c <setKeyReg2+0x64>)
 80001e8:	f001 fd4a 	bl	8001c80 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4619      	mov	r1, r3
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <setKeyReg2+0x68>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d10a      	bne.n	8000214 <setKeyReg2+0x5c>
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	4806      	ldr	r0, [pc, #24]	; (800021c <setKeyReg2+0x64>)
 8000204:	f001 fd3c 	bl	8001c80 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	4619      	mov	r1, r3
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <setKeyReg2+0x68>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40010800 	.word	0x40010800
 8000220:	20000018 	.word	0x20000018

08000224 <setFlag>:

void setFlag(int i) {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	if (i == 0) MODE_flag = 1;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d102      	bne.n	8000238 <setFlag+0x14>
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <setFlag+0x38>)
 8000234:	2201      	movs	r2, #1
 8000236:	601a      	str	r2, [r3, #0]
	if (i == 1) TIME_flag = 1;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d102      	bne.n	8000244 <setFlag+0x20>
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <setFlag+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	601a      	str	r2, [r3, #0]
	if (i == 2) SET_flag = 1;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d102      	bne.n	8000250 <setFlag+0x2c>
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <setFlag+0x40>)
 800024c:	2201      	movs	r2, #1
 800024e:	601a      	str	r2, [r3, #0]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	20000064 	.word	0x20000064
 8000260:	20000068 	.word	0x20000068
 8000264:	2000006c 	.word	0x2000006c

08000268 <getKeyInput>:


void getKeyInput() {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0

	for (int i = 0; i < 3; i++) {
 800026e:	2300      	movs	r3, #0
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	e012      	b.n	800029a <getKeyInput+0x32>
		KeyReg0[i] = KeyReg1[i];
 8000274:	4a32      	ldr	r2, [pc, #200]	; (8000340 <getKeyInput+0xd8>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027c:	4931      	ldr	r1, [pc, #196]	; (8000344 <getKeyInput+0xdc>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000284:	4a30      	ldr	r2, [pc, #192]	; (8000348 <getKeyInput+0xe0>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	492c      	ldr	r1, [pc, #176]	; (8000340 <getKeyInput+0xd8>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dde9      	ble.n	8000274 <getKeyInput+0xc>
	//KeyReg2[1] = HAL_GPIO_ReadPin(BUTTON_TIME_GPIO_Port, BUTTON_TIME_Pin);
	//KeyReg2[2] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);



	for (int i = 0; i < 3; i++) {
 80002a0:	2300      	movs	r3, #0
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	e044      	b.n	8000330 <getKeyInput+0xc8>
		KeyReg0[i] = KeyReg1[i];
 80002a6:	4a26      	ldr	r2, [pc, #152]	; (8000340 <getKeyInput+0xd8>)
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ae:	4925      	ldr	r1, [pc, #148]	; (8000344 <getKeyInput+0xdc>)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80002b6:	4a24      	ldr	r2, [pc, #144]	; (8000348 <getKeyInput+0xe0>)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002be:	4920      	ldr	r1, [pc, #128]	; (8000340 <getKeyInput+0xd8>)
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		setKeyReg2(i);
 80002c6:	6838      	ldr	r0, [r7, #0]
 80002c8:	f7ff ff76 	bl	80001b8 <setKeyReg2>


		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80002cc:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <getKeyInput+0xdc>)
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d4:	491a      	ldr	r1, [pc, #104]	; (8000340 <getKeyInput+0xd8>)
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d124      	bne.n	800032a <getKeyInput+0xc2>
 80002e0:	4a17      	ldr	r2, [pc, #92]	; (8000340 <getKeyInput+0xd8>)
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e8:	4917      	ldr	r1, [pc, #92]	; (8000348 <getKeyInput+0xe0>)
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d11a      	bne.n	800032a <getKeyInput+0xc2>
			if (KeyReg3[i] != KeyReg2[i]) {
 80002f4:	4a15      	ldr	r2, [pc, #84]	; (800034c <getKeyInput+0xe4>)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fc:	4912      	ldr	r1, [pc, #72]	; (8000348 <getKeyInput+0xe0>)
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000304:	429a      	cmp	r2, r3
 8000306:	d010      	beq.n	800032a <getKeyInput+0xc2>
				KeyReg3[i] = KeyReg2[i];
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <getKeyInput+0xe0>)
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	490e      	ldr	r1, [pc, #56]	; (800034c <getKeyInput+0xe4>)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == NORMAL_STATE) {
 8000318:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <getKeyInput+0xe0>)
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d102      	bne.n	800032a <getKeyInput+0xc2>
					setFlag(i);
 8000324:	6838      	ldr	r0, [r7, #0]
 8000326:	f7ff ff7d 	bl	8000224 <setFlag>
	for (int i = 0; i < 3; i++) {
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	3301      	adds	r3, #1
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	2b02      	cmp	r3, #2
 8000334:	ddb7      	ble.n	80002a6 <getKeyInput+0x3e>
				SET_flag = 1;
			}
		}
	}*/

}
 8000336:	bf00      	nop
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	2000000c 	.word	0x2000000c
 8000344:	20000000 	.word	0x20000000
 8000348:	20000018 	.word	0x20000018
 800034c:	20000024 	.word	0x20000024

08000350 <fsm_run>:
int light1_counter = 0;
int light2_counter = 0;
int s1 = 0, s3 = 0;
int tempRed = 0, tempYellow = 0, tempGreen = 0;

void fsm_run() {
 8000350:	b5b0      	push	{r4, r5, r7, lr}
 8000352:	af00      	add	r7, sp, #0
	switch (status) {
 8000354:	4b90      	ldr	r3, [pc, #576]	; (8000598 <fsm_run+0x248>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b04      	cmp	r3, #4
 800035a:	f200 830b 	bhi.w	8000974 <fsm_run+0x624>
 800035e:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <fsm_run+0x14>)
 8000360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000364:	08000379 	.word	0x08000379
 8000368:	080003f3 	.word	0x080003f3
 800036c:	080006e5 	.word	0x080006e5
 8000370:	080007c5 	.word	0x080007c5
 8000374:	080008d9 	.word	0x080008d9
	case RESET:

		setTimer1(30);
 8000378:	201e      	movs	r0, #30
 800037a:	f001 f869 	bl	8001450 <setTimer1>
		setTimer2(40);
 800037e:	2028      	movs	r0, #40	; 0x28
 8000380:	f001 f882 	bl	8001488 <setTimer2>

		status = STATE_MODE_1;
 8000384:	4b84      	ldr	r3, [pc, #528]	; (8000598 <fsm_run+0x248>)
 8000386:	2201      	movs	r2, #1
 8000388:	601a      	str	r2, [r3, #0]
		tempRed = timeRed;
 800038a:	4b84      	ldr	r3, [pc, #528]	; (800059c <fsm_run+0x24c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a84      	ldr	r2, [pc, #528]	; (80005a0 <fsm_run+0x250>)
 8000390:	6013      	str	r3, [r2, #0]
		tempGreen = timeGreen;
 8000392:	4b84      	ldr	r3, [pc, #528]	; (80005a4 <fsm_run+0x254>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a84      	ldr	r2, [pc, #528]	; (80005a8 <fsm_run+0x258>)
 8000398:	6013      	str	r3, [r2, #0]
		tempYellow = timeYellow;
 800039a:	4b84      	ldr	r3, [pc, #528]	; (80005ac <fsm_run+0x25c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a84      	ldr	r2, [pc, #528]	; (80005b0 <fsm_run+0x260>)
 80003a0:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2120      	movs	r1, #32
 80003a6:	4883      	ldr	r0, [pc, #524]	; (80005b4 <fsm_run+0x264>)
 80003a8:	f001 fc81 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2140      	movs	r1, #64	; 0x40
 80003b0:	4880      	ldr	r0, [pc, #512]	; (80005b4 <fsm_run+0x264>)
 80003b2:	f001 fc7c 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	487e      	ldr	r0, [pc, #504]	; (80005b4 <fsm_run+0x264>)
 80003bc:	f001 fc77 	bl	8001cae <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c6:	487b      	ldr	r0, [pc, #492]	; (80005b4 <fsm_run+0x264>)
 80003c8:	f001 fc71 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d2:	4878      	ldr	r0, [pc, #480]	; (80005b4 <fsm_run+0x264>)
 80003d4:	f001 fc6b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003de:	4875      	ldr	r0, [pc, #468]	; (80005b4 <fsm_run+0x264>)
 80003e0:	f001 fc65 	bl	8001cae <HAL_GPIO_WritePin>

		light1_counter = 0;
 80003e4:	4b74      	ldr	r3, [pc, #464]	; (80005b8 <fsm_run+0x268>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
		light2_counter = 0;
 80003ea:	4b74      	ldr	r3, [pc, #464]	; (80005bc <fsm_run+0x26c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]

		break;
 80003f0:	e2c9      	b.n	8000986 <fsm_run+0x636>
	case STATE_MODE_1:
		total_time = timeRed + timeGreen + timeYellow;
 80003f2:	4b6a      	ldr	r3, [pc, #424]	; (800059c <fsm_run+0x24c>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <fsm_run+0x254>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	441a      	add	r2, r3
 80003fc:	4b6b      	ldr	r3, [pc, #428]	; (80005ac <fsm_run+0x25c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4413      	add	r3, r2
 8000402:	4a6f      	ldr	r2, [pc, #444]	; (80005c0 <fsm_run+0x270>)
 8000404:	6013      	str	r3, [r2, #0]
		if (light1_counter == 0) light1_counter = total_time;
 8000406:	4b6c      	ldr	r3, [pc, #432]	; (80005b8 <fsm_run+0x268>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d103      	bne.n	8000416 <fsm_run+0xc6>
 800040e:	4b6c      	ldr	r3, [pc, #432]	; (80005c0 <fsm_run+0x270>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a69      	ldr	r2, [pc, #420]	; (80005b8 <fsm_run+0x268>)
 8000414:	6013      	str	r3, [r2, #0]
		if (light2_counter == 0) light2_counter = total_time;
 8000416:	4b69      	ldr	r3, [pc, #420]	; (80005bc <fsm_run+0x26c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d103      	bne.n	8000426 <fsm_run+0xd6>
 800041e:	4b68      	ldr	r3, [pc, #416]	; (80005c0 <fsm_run+0x270>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a66      	ldr	r2, [pc, #408]	; (80005bc <fsm_run+0x26c>)
 8000424:	6013      	str	r3, [r2, #0]

		if (timeRed < light1_counter && light1_counter <= total_time) {
 8000426:	4b5d      	ldr	r3, [pc, #372]	; (800059c <fsm_run+0x24c>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	4b63      	ldr	r3, [pc, #396]	; (80005b8 <fsm_run+0x268>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	429a      	cmp	r2, r3
 8000430:	da1c      	bge.n	800046c <fsm_run+0x11c>
 8000432:	4b61      	ldr	r3, [pc, #388]	; (80005b8 <fsm_run+0x268>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <fsm_run+0x270>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	429a      	cmp	r2, r3
 800043c:	dc16      	bgt.n	800046c <fsm_run+0x11c>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2120      	movs	r1, #32
 8000442:	485c      	ldr	r0, [pc, #368]	; (80005b4 <fsm_run+0x264>)
 8000444:	f001 fc33 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	4859      	ldr	r0, [pc, #356]	; (80005b4 <fsm_run+0x264>)
 800044e:	f001 fc2e 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	4857      	ldr	r0, [pc, #348]	; (80005b4 <fsm_run+0x264>)
 8000458:	f001 fc29 	bl	8001cae <HAL_GPIO_WritePin>
			s1 = light1_counter - timeRed;
 800045c:	4b56      	ldr	r3, [pc, #344]	; (80005b8 <fsm_run+0x268>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	4b4e      	ldr	r3, [pc, #312]	; (800059c <fsm_run+0x24c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	1ad3      	subs	r3, r2, r3
 8000466:	4a57      	ldr	r2, [pc, #348]	; (80005c4 <fsm_run+0x274>)
 8000468:	6013      	str	r3, [r2, #0]
 800046a:	e03f      	b.n	80004ec <fsm_run+0x19c>
		}
		else if (timeYellow < light1_counter && light1_counter <= timeRed) {
 800046c:	4b4f      	ldr	r3, [pc, #316]	; (80005ac <fsm_run+0x25c>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	4b51      	ldr	r3, [pc, #324]	; (80005b8 <fsm_run+0x268>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	429a      	cmp	r2, r3
 8000476:	da1c      	bge.n	80004b2 <fsm_run+0x162>
 8000478:	4b4f      	ldr	r3, [pc, #316]	; (80005b8 <fsm_run+0x268>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b47      	ldr	r3, [pc, #284]	; (800059c <fsm_run+0x24c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	429a      	cmp	r2, r3
 8000482:	dc16      	bgt.n	80004b2 <fsm_run+0x162>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2120      	movs	r1, #32
 8000488:	484a      	ldr	r0, [pc, #296]	; (80005b4 <fsm_run+0x264>)
 800048a:	f001 fc10 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	4848      	ldr	r0, [pc, #288]	; (80005b4 <fsm_run+0x264>)
 8000494:	f001 fc0b 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	4845      	ldr	r0, [pc, #276]	; (80005b4 <fsm_run+0x264>)
 800049e:	f001 fc06 	bl	8001cae <HAL_GPIO_WritePin>
			s1 = light1_counter - timeYellow;
 80004a2:	4b45      	ldr	r3, [pc, #276]	; (80005b8 <fsm_run+0x268>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	4b41      	ldr	r3, [pc, #260]	; (80005ac <fsm_run+0x25c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	4a45      	ldr	r2, [pc, #276]	; (80005c4 <fsm_run+0x274>)
 80004ae:	6013      	str	r3, [r2, #0]
 80004b0:	e01c      	b.n	80004ec <fsm_run+0x19c>
		}
		else if (0 < light1_counter && light1_counter <= timeYellow) {
 80004b2:	4b41      	ldr	r3, [pc, #260]	; (80005b8 <fsm_run+0x268>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dd18      	ble.n	80004ec <fsm_run+0x19c>
 80004ba:	4b3f      	ldr	r3, [pc, #252]	; (80005b8 <fsm_run+0x268>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	4b3b      	ldr	r3, [pc, #236]	; (80005ac <fsm_run+0x25c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	dc12      	bgt.n	80004ec <fsm_run+0x19c>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2120      	movs	r1, #32
 80004ca:	483a      	ldr	r0, [pc, #232]	; (80005b4 <fsm_run+0x264>)
 80004cc:	f001 fbef 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2140      	movs	r1, #64	; 0x40
 80004d4:	4837      	ldr	r0, [pc, #220]	; (80005b4 <fsm_run+0x264>)
 80004d6:	f001 fbea 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	4835      	ldr	r0, [pc, #212]	; (80005b4 <fsm_run+0x264>)
 80004e0:	f001 fbe5 	bl	8001cae <HAL_GPIO_WritePin>
			s1 = light1_counter;
 80004e4:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <fsm_run+0x268>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a36      	ldr	r2, [pc, #216]	; (80005c4 <fsm_run+0x274>)
 80004ea:	6013      	str	r3, [r2, #0]
		}

		if (timeRed + timeYellow < light2_counter && light2_counter <= total_time) {
 80004ec:	4b2b      	ldr	r3, [pc, #172]	; (800059c <fsm_run+0x24c>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <fsm_run+0x25c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	441a      	add	r2, r3
 80004f6:	4b31      	ldr	r3, [pc, #196]	; (80005bc <fsm_run+0x26c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	da22      	bge.n	8000544 <fsm_run+0x1f4>
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <fsm_run+0x26c>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4b2f      	ldr	r3, [pc, #188]	; (80005c0 <fsm_run+0x270>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	429a      	cmp	r2, r3
 8000508:	dc1c      	bgt.n	8000544 <fsm_run+0x1f4>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000510:	4828      	ldr	r0, [pc, #160]	; (80005b4 <fsm_run+0x264>)
 8000512:	f001 fbcc 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	4825      	ldr	r0, [pc, #148]	; (80005b4 <fsm_run+0x264>)
 800051e:	f001 fbc6 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000528:	4822      	ldr	r0, [pc, #136]	; (80005b4 <fsm_run+0x264>)
 800052a:	f001 fbc0 	bl	8001cae <HAL_GPIO_WritePin>
			s3 = light2_counter - timeRed - timeYellow;
 800052e:	4b23      	ldr	r3, [pc, #140]	; (80005bc <fsm_run+0x26c>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <fsm_run+0x24c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	1ad2      	subs	r2, r2, r3
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <fsm_run+0x25c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <fsm_run+0x278>)
 8000540:	6013      	str	r3, [r2, #0]
 8000542:	e063      	b.n	800060c <fsm_run+0x2bc>
		}
		else if (timeRed < light2_counter && light2_counter <= timeRed + timeYellow) {
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <fsm_run+0x24c>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <fsm_run+0x26c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	429a      	cmp	r2, r3
 800054e:	da3d      	bge.n	80005cc <fsm_run+0x27c>
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <fsm_run+0x24c>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <fsm_run+0x25c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	441a      	add	r2, r3
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <fsm_run+0x26c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	429a      	cmp	r2, r3
 8000560:	db34      	blt.n	80005cc <fsm_run+0x27c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000568:	4812      	ldr	r0, [pc, #72]	; (80005b4 <fsm_run+0x264>)
 800056a:	f001 fba0 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000574:	480f      	ldr	r0, [pc, #60]	; (80005b4 <fsm_run+0x264>)
 8000576:	f001 fb9a 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <fsm_run+0x264>)
 8000582:	f001 fb94 	bl	8001cae <HAL_GPIO_WritePin>
			s3 = light2_counter - timeRed;
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <fsm_run+0x26c>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <fsm_run+0x24c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <fsm_run+0x278>)
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	e03a      	b.n	800060c <fsm_run+0x2bc>
 8000596:	bf00      	nop
 8000598:	20000090 	.word	0x20000090
 800059c:	20000030 	.word	0x20000030
 80005a0:	20000084 	.word	0x20000084
 80005a4:	20000034 	.word	0x20000034
 80005a8:	2000008c 	.word	0x2000008c
 80005ac:	20000038 	.word	0x20000038
 80005b0:	20000088 	.word	0x20000088
 80005b4:	40010800 	.word	0x40010800
 80005b8:	20000074 	.word	0x20000074
 80005bc:	20000078 	.word	0x20000078
 80005c0:	20000070 	.word	0x20000070
 80005c4:	2000007c 	.word	0x2000007c
 80005c8:	20000080 	.word	0x20000080
		}
		else if (0 < light2_counter && light2_counter <= timeRed) {
 80005cc:	4bb5      	ldr	r3, [pc, #724]	; (80008a4 <fsm_run+0x554>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	dd1b      	ble.n	800060c <fsm_run+0x2bc>
 80005d4:	4bb3      	ldr	r3, [pc, #716]	; (80008a4 <fsm_run+0x554>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4bb3      	ldr	r3, [pc, #716]	; (80008a8 <fsm_run+0x558>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dc15      	bgt.n	800060c <fsm_run+0x2bc>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e6:	48b1      	ldr	r0, [pc, #708]	; (80008ac <fsm_run+0x55c>)
 80005e8:	f001 fb61 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f2:	48ae      	ldr	r0, [pc, #696]	; (80008ac <fsm_run+0x55c>)
 80005f4:	f001 fb5b 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fe:	48ab      	ldr	r0, [pc, #684]	; (80008ac <fsm_run+0x55c>)
 8000600:	f001 fb55 	bl	8001cae <HAL_GPIO_WritePin>
			s3 = light2_counter;
 8000604:	4ba7      	ldr	r3, [pc, #668]	; (80008a4 <fsm_run+0x554>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4aa9      	ldr	r2, [pc, #676]	; (80008b0 <fsm_run+0x560>)
 800060a:	6013      	str	r3, [r2, #0]
		}



		updateSEGBuffer(s1/10, s1%10, s3/10, s3%10);
 800060c:	4ba9      	ldr	r3, [pc, #676]	; (80008b4 <fsm_run+0x564>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4aa9      	ldr	r2, [pc, #676]	; (80008b8 <fsm_run+0x568>)
 8000612:	fb82 1203 	smull	r1, r2, r2, r3
 8000616:	1092      	asrs	r2, r2, #2
 8000618:	17db      	asrs	r3, r3, #31
 800061a:	1ad4      	subs	r4, r2, r3
 800061c:	4ba5      	ldr	r3, [pc, #660]	; (80008b4 <fsm_run+0x564>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4ba5      	ldr	r3, [pc, #660]	; (80008b8 <fsm_run+0x568>)
 8000622:	fb83 1302 	smull	r1, r3, r3, r2
 8000626:	1099      	asrs	r1, r3, #2
 8000628:	17d3      	asrs	r3, r2, #31
 800062a:	1ac9      	subs	r1, r1, r3
 800062c:	460b      	mov	r3, r1
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	440b      	add	r3, r1
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	1ad1      	subs	r1, r2, r3
 8000636:	4b9e      	ldr	r3, [pc, #632]	; (80008b0 <fsm_run+0x560>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a9f      	ldr	r2, [pc, #636]	; (80008b8 <fsm_run+0x568>)
 800063c:	fb82 0203 	smull	r0, r2, r2, r3
 8000640:	1092      	asrs	r2, r2, #2
 8000642:	17db      	asrs	r3, r3, #31
 8000644:	1ad5      	subs	r5, r2, r3
 8000646:	4b9a      	ldr	r3, [pc, #616]	; (80008b0 <fsm_run+0x560>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4b9b      	ldr	r3, [pc, #620]	; (80008b8 <fsm_run+0x568>)
 800064c:	fb83 0302 	smull	r0, r3, r3, r2
 8000650:	1098      	asrs	r0, r3, #2
 8000652:	17d3      	asrs	r3, r2, #31
 8000654:	1ac0      	subs	r0, r0, r3
 8000656:	4603      	mov	r3, r0
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4403      	add	r3, r0
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	1ad0      	subs	r0, r2, r3
 8000660:	4603      	mov	r3, r0
 8000662:	462a      	mov	r2, r5
 8000664:	4620      	mov	r0, r4
 8000666:	f000 fd4b 	bl	8001100 <updateSEGBuffer>

		if (timer1_flag == 1) {
 800066a:	4b94      	ldr	r3, [pc, #592]	; (80008bc <fsm_run+0x56c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d10d      	bne.n	800068e <fsm_run+0x33e>
			light1_counter--;
 8000672:	4b93      	ldr	r3, [pc, #588]	; (80008c0 <fsm_run+0x570>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	4a91      	ldr	r2, [pc, #580]	; (80008c0 <fsm_run+0x570>)
 800067a:	6013      	str	r3, [r2, #0]
			light2_counter--;
 800067c:	4b89      	ldr	r3, [pc, #548]	; (80008a4 <fsm_run+0x554>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3b01      	subs	r3, #1
 8000682:	4a88      	ldr	r2, [pc, #544]	; (80008a4 <fsm_run+0x554>)
 8000684:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068a:	f000 fee1 	bl	8001450 <setTimer1>
		}



		if (MODE_PRESSED() == 1) {
 800068e:	f7ff fd5d 	bl	800014c <MODE_PRESSED>
 8000692:	4603      	mov	r3, r0
 8000694:	2b01      	cmp	r3, #1
 8000696:	f040 816f 	bne.w	8000978 <fsm_run+0x628>
			status = STATE_MODE_2;
 800069a:	4b8a      	ldr	r3, [pc, #552]	; (80008c4 <fsm_run+0x574>)
 800069c:	2202      	movs	r2, #2
 800069e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	4881      	ldr	r0, [pc, #516]	; (80008ac <fsm_run+0x55c>)
 80006a8:	f001 fb01 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b2:	487e      	ldr	r0, [pc, #504]	; (80008ac <fsm_run+0x55c>)
 80006b4:	f001 fafb 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	487b      	ldr	r0, [pc, #492]	; (80008ac <fsm_run+0x55c>)
 80006be:	f001 faf6 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2120      	movs	r1, #32
 80006c6:	4879      	ldr	r0, [pc, #484]	; (80008ac <fsm_run+0x55c>)
 80006c8:	f001 faf1 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	4876      	ldr	r0, [pc, #472]	; (80008ac <fsm_run+0x55c>)
 80006d4:	f001 faeb 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4873      	ldr	r0, [pc, #460]	; (80008ac <fsm_run+0x55c>)
 80006de:	f001 fae6 	bl	8001cae <HAL_GPIO_WritePin>
		}
		break;
 80006e2:	e149      	b.n	8000978 <fsm_run+0x628>
	case STATE_MODE_2:
		updateSEGBuffer(0, 2, tempRed / 10, tempRed % 10);
 80006e4:	4b78      	ldr	r3, [pc, #480]	; (80008c8 <fsm_run+0x578>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a73      	ldr	r2, [pc, #460]	; (80008b8 <fsm_run+0x568>)
 80006ea:	fb82 1203 	smull	r1, r2, r2, r3
 80006ee:	1092      	asrs	r2, r2, #2
 80006f0:	17db      	asrs	r3, r3, #31
 80006f2:	1ad0      	subs	r0, r2, r3
 80006f4:	4b74      	ldr	r3, [pc, #464]	; (80008c8 <fsm_run+0x578>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b6f      	ldr	r3, [pc, #444]	; (80008b8 <fsm_run+0x568>)
 80006fa:	fb83 1302 	smull	r1, r3, r3, r2
 80006fe:	1099      	asrs	r1, r3, #2
 8000700:	17d3      	asrs	r3, r2, #31
 8000702:	1ac9      	subs	r1, r1, r3
 8000704:	460b      	mov	r3, r1
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	1ad1      	subs	r1, r2, r3
 800070e:	460b      	mov	r3, r1
 8000710:	4602      	mov	r2, r0
 8000712:	2102      	movs	r1, #2
 8000714:	2000      	movs	r0, #0
 8000716:	f000 fcf3 	bl	8001100 <updateSEGBuffer>

		if (timer2_flag == 1) {
 800071a:	4b6c      	ldr	r3, [pc, #432]	; (80008cc <fsm_run+0x57c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10b      	bne.n	800073a <fsm_run+0x3ea>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 8000722:	2120      	movs	r1, #32
 8000724:	4861      	ldr	r0, [pc, #388]	; (80008ac <fsm_run+0x55c>)
 8000726:	f001 fada 	bl	8001cde <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	485f      	ldr	r0, [pc, #380]	; (80008ac <fsm_run+0x55c>)
 8000730:	f001 fad5 	bl	8001cde <HAL_GPIO_TogglePin>
			setTimer2(250);
 8000734:	20fa      	movs	r0, #250	; 0xfa
 8000736:	f000 fea7 	bl	8001488 <setTimer2>
		}


		if (MODE_PRESSED() == 1) {
 800073a:	f7ff fd07 	bl	800014c <MODE_PRESSED>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d123      	bne.n	800078c <fsm_run+0x43c>
			status = STATE_MODE_3;
 8000744:	4b5f      	ldr	r3, [pc, #380]	; (80008c4 <fsm_run+0x574>)
 8000746:	2203      	movs	r2, #3
 8000748:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000750:	4856      	ldr	r0, [pc, #344]	; (80008ac <fsm_run+0x55c>)
 8000752:	f001 faac 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075c:	4853      	ldr	r0, [pc, #332]	; (80008ac <fsm_run+0x55c>)
 800075e:	f001 faa6 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	4851      	ldr	r0, [pc, #324]	; (80008ac <fsm_run+0x55c>)
 8000768:	f001 faa1 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2120      	movs	r1, #32
 8000770:	484e      	ldr	r0, [pc, #312]	; (80008ac <fsm_run+0x55c>)
 8000772:	f001 fa9c 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077c:	484b      	ldr	r0, [pc, #300]	; (80008ac <fsm_run+0x55c>)
 800077e:	f001 fa96 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	4849      	ldr	r0, [pc, #292]	; (80008ac <fsm_run+0x55c>)
 8000788:	f001 fa91 	bl	8001cae <HAL_GPIO_WritePin>
		}

		if (TIME_PRESSED() == 1) {
 800078c:	f7ff fcf0 	bl	8000170 <TIME_PRESSED>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d10b      	bne.n	80007ae <fsm_run+0x45e>
			tempRed++;
 8000796:	4b4c      	ldr	r3, [pc, #304]	; (80008c8 <fsm_run+0x578>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	4a4a      	ldr	r2, [pc, #296]	; (80008c8 <fsm_run+0x578>)
 800079e:	6013      	str	r3, [r2, #0]
			if (tempRed > 99) tempRed = 0;
 80007a0:	4b49      	ldr	r3, [pc, #292]	; (80008c8 <fsm_run+0x578>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b63      	cmp	r3, #99	; 0x63
 80007a6:	dd02      	ble.n	80007ae <fsm_run+0x45e>
 80007a8:	4b47      	ldr	r3, [pc, #284]	; (80008c8 <fsm_run+0x578>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
		}

		if (SET_PRESSED() == 1) {
 80007ae:	f7ff fcf1 	bl	8000194 <SET_PRESSED>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	f040 80e1 	bne.w	800097c <fsm_run+0x62c>
			timeRed = tempRed;
 80007ba:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <fsm_run+0x578>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a3a      	ldr	r2, [pc, #232]	; (80008a8 <fsm_run+0x558>)
 80007c0:	6013      	str	r3, [r2, #0]
		}
		break;
 80007c2:	e0db      	b.n	800097c <fsm_run+0x62c>
	case STATE_MODE_3:
		updateSEGBuffer(0, 3, tempYellow / 10, tempYellow % 10);
 80007c4:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <fsm_run+0x580>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a3b      	ldr	r2, [pc, #236]	; (80008b8 <fsm_run+0x568>)
 80007ca:	fb82 1203 	smull	r1, r2, r2, r3
 80007ce:	1092      	asrs	r2, r2, #2
 80007d0:	17db      	asrs	r3, r3, #31
 80007d2:	1ad0      	subs	r0, r2, r3
 80007d4:	4b3e      	ldr	r3, [pc, #248]	; (80008d0 <fsm_run+0x580>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <fsm_run+0x568>)
 80007da:	fb83 1302 	smull	r1, r3, r3, r2
 80007de:	1099      	asrs	r1, r3, #2
 80007e0:	17d3      	asrs	r3, r2, #31
 80007e2:	1ac9      	subs	r1, r1, r3
 80007e4:	460b      	mov	r3, r1
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	1ad1      	subs	r1, r2, r3
 80007ee:	460b      	mov	r3, r1
 80007f0:	4602      	mov	r2, r0
 80007f2:	2103      	movs	r1, #3
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 fc83 	bl	8001100 <updateSEGBuffer>

		if (timer2_flag == 1) {
 80007fa:	4b34      	ldr	r3, [pc, #208]	; (80008cc <fsm_run+0x57c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d10b      	bne.n	800081a <fsm_run+0x4ca>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 8000802:	2180      	movs	r1, #128	; 0x80
 8000804:	4829      	ldr	r0, [pc, #164]	; (80008ac <fsm_run+0x55c>)
 8000806:	f001 fa6a 	bl	8001cde <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4827      	ldr	r0, [pc, #156]	; (80008ac <fsm_run+0x55c>)
 8000810:	f001 fa65 	bl	8001cde <HAL_GPIO_TogglePin>
			setTimer2(250);
 8000814:	20fa      	movs	r0, #250	; 0xfa
 8000816:	f000 fe37 	bl	8001488 <setTimer2>
		}

		if (MODE_PRESSED() == 1) {
 800081a:	f7ff fc97 	bl	800014c <MODE_PRESSED>
 800081e:	4603      	mov	r3, r0
 8000820:	2b01      	cmp	r3, #1
 8000822:	d123      	bne.n	800086c <fsm_run+0x51c>
			status = STATE_MODE_4;
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <fsm_run+0x574>)
 8000826:	2204      	movs	r2, #4
 8000828:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000830:	481e      	ldr	r0, [pc, #120]	; (80008ac <fsm_run+0x55c>)
 8000832:	f001 fa3c 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083c:	481b      	ldr	r0, [pc, #108]	; (80008ac <fsm_run+0x55c>)
 800083e:	f001 fa36 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	4819      	ldr	r0, [pc, #100]	; (80008ac <fsm_run+0x55c>)
 8000848:	f001 fa31 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2120      	movs	r1, #32
 8000850:	4816      	ldr	r0, [pc, #88]	; (80008ac <fsm_run+0x55c>)
 8000852:	f001 fa2c 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <fsm_run+0x55c>)
 800085e:	f001 fa26 	bl	8001cae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	4811      	ldr	r0, [pc, #68]	; (80008ac <fsm_run+0x55c>)
 8000868:	f001 fa21 	bl	8001cae <HAL_GPIO_WritePin>
		}

		if (TIME_PRESSED() == 1) {
 800086c:	f7ff fc80 	bl	8000170 <TIME_PRESSED>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d10b      	bne.n	800088e <fsm_run+0x53e>
			tempYellow++;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <fsm_run+0x580>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <fsm_run+0x580>)
 800087e:	6013      	str	r3, [r2, #0]
			if (tempYellow > 99) tempYellow = 0;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <fsm_run+0x580>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b63      	cmp	r3, #99	; 0x63
 8000886:	dd02      	ble.n	800088e <fsm_run+0x53e>
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <fsm_run+0x580>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
		}

		if (SET_PRESSED() == 1) {
 800088e:	f7ff fc81 	bl	8000194 <SET_PRESSED>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d173      	bne.n	8000980 <fsm_run+0x630>
			timeYellow = tempYellow;
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <fsm_run+0x580>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <fsm_run+0x584>)
 800089e:	6013      	str	r3, [r2, #0]
		}
		break;
 80008a0:	e06e      	b.n	8000980 <fsm_run+0x630>
 80008a2:	bf00      	nop
 80008a4:	20000078 	.word	0x20000078
 80008a8:	20000030 	.word	0x20000030
 80008ac:	40010800 	.word	0x40010800
 80008b0:	20000080 	.word	0x20000080
 80008b4:	2000007c 	.word	0x2000007c
 80008b8:	66666667 	.word	0x66666667
 80008bc:	200000b0 	.word	0x200000b0
 80008c0:	20000074 	.word	0x20000074
 80008c4:	20000090 	.word	0x20000090
 80008c8:	20000084 	.word	0x20000084
 80008cc:	200000b8 	.word	0x200000b8
 80008d0:	20000088 	.word	0x20000088
 80008d4:	20000038 	.word	0x20000038
	case STATE_MODE_4:
		updateSEGBuffer(0, 4, tempGreen / 10, tempGreen % 10);
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <fsm_run+0x63c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a2c      	ldr	r2, [pc, #176]	; (8000990 <fsm_run+0x640>)
 80008de:	fb82 1203 	smull	r1, r2, r2, r3
 80008e2:	1092      	asrs	r2, r2, #2
 80008e4:	17db      	asrs	r3, r3, #31
 80008e6:	1ad0      	subs	r0, r2, r3
 80008e8:	4b28      	ldr	r3, [pc, #160]	; (800098c <fsm_run+0x63c>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <fsm_run+0x640>)
 80008ee:	fb83 1302 	smull	r1, r3, r3, r2
 80008f2:	1099      	asrs	r1, r3, #2
 80008f4:	17d3      	asrs	r3, r2, #31
 80008f6:	1ac9      	subs	r1, r1, r3
 80008f8:	460b      	mov	r3, r1
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	440b      	add	r3, r1
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	1ad1      	subs	r1, r2, r3
 8000902:	460b      	mov	r3, r1
 8000904:	4602      	mov	r2, r0
 8000906:	2104      	movs	r1, #4
 8000908:	2000      	movs	r0, #0
 800090a:	f000 fbf9 	bl	8001100 <updateSEGBuffer>

		if (timer2_flag == 1) {
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <fsm_run+0x644>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d10b      	bne.n	800092e <fsm_run+0x5de>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	481f      	ldr	r0, [pc, #124]	; (8000998 <fsm_run+0x648>)
 800091a:	f001 f9e0 	bl	8001cde <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 800091e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000922:	481d      	ldr	r0, [pc, #116]	; (8000998 <fsm_run+0x648>)
 8000924:	f001 f9db 	bl	8001cde <HAL_GPIO_TogglePin>
			setTimer2(250);
 8000928:	20fa      	movs	r0, #250	; 0xfa
 800092a:	f000 fdad 	bl	8001488 <setTimer2>
		}

		if (MODE_PRESSED() == 1) {
 800092e:	f7ff fc0d 	bl	800014c <MODE_PRESSED>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	d102      	bne.n	800093e <fsm_run+0x5ee>
			status = RESET;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <fsm_run+0x64c>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
		}

		if (TIME_PRESSED() == 1) {
 800093e:	f7ff fc17 	bl	8000170 <TIME_PRESSED>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d10b      	bne.n	8000960 <fsm_run+0x610>
			tempGreen++;
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <fsm_run+0x63c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <fsm_run+0x63c>)
 8000950:	6013      	str	r3, [r2, #0]
			if (tempGreen > 99) tempGreen = 0;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <fsm_run+0x63c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b63      	cmp	r3, #99	; 0x63
 8000958:	dd02      	ble.n	8000960 <fsm_run+0x610>
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <fsm_run+0x63c>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
		}

		if (SET_PRESSED() == 1) {
 8000960:	f7ff fc18 	bl	8000194 <SET_PRESSED>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d10c      	bne.n	8000984 <fsm_run+0x634>
			timeGreen = tempGreen;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <fsm_run+0x63c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <fsm_run+0x650>)
 8000970:	6013      	str	r3, [r2, #0]
		}
		break;
 8000972:	e007      	b.n	8000984 <fsm_run+0x634>
	default:
		break;
 8000974:	bf00      	nop
 8000976:	e006      	b.n	8000986 <fsm_run+0x636>
		break;
 8000978:	bf00      	nop
 800097a:	e004      	b.n	8000986 <fsm_run+0x636>
		break;
 800097c:	bf00      	nop
 800097e:	e002      	b.n	8000986 <fsm_run+0x636>
		break;
 8000980:	bf00      	nop
 8000982:	e000      	b.n	8000986 <fsm_run+0x636>
		break;
 8000984:	bf00      	nop
	}
}
 8000986:	bf00      	nop
 8000988:	bdb0      	pop	{r4, r5, r7, pc}
 800098a:	bf00      	nop
 800098c:	2000008c 	.word	0x2000008c
 8000990:	66666667 	.word	0x66666667
 8000994:	200000b8 	.word	0x200000b8
 8000998:	40010800 	.word	0x40010800
 800099c:	20000090 	.word	0x20000090
 80009a0:	20000034 	.word	0x20000034

080009a4 <display7SEG0>:
 *      Author: BIN
 */

#include "global.h"

void display7SEG0(int num) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d123      	bne.n	80009fa <display7SEG0+0x56>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2101      	movs	r1, #1
 80009b6:	48c0      	ldr	r0, [pc, #768]	; (8000cb8 <display7SEG0+0x314>)
 80009b8:	f001 f979 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2102      	movs	r1, #2
 80009c0:	48bd      	ldr	r0, [pc, #756]	; (8000cb8 <display7SEG0+0x314>)
 80009c2:	f001 f974 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2104      	movs	r1, #4
 80009ca:	48bb      	ldr	r0, [pc, #748]	; (8000cb8 <display7SEG0+0x314>)
 80009cc:	f001 f96f 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2108      	movs	r1, #8
 80009d4:	48b8      	ldr	r0, [pc, #736]	; (8000cb8 <display7SEG0+0x314>)
 80009d6:	f001 f96a 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2110      	movs	r1, #16
 80009de:	48b6      	ldr	r0, [pc, #728]	; (8000cb8 <display7SEG0+0x314>)
 80009e0:	f001 f965 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2120      	movs	r1, #32
 80009e8:	48b3      	ldr	r0, [pc, #716]	; (8000cb8 <display7SEG0+0x314>)
 80009ea:	f001 f960 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2140      	movs	r1, #64	; 0x40
 80009f2:	48b1      	ldr	r0, [pc, #708]	; (8000cb8 <display7SEG0+0x314>)
 80009f4:	f001 f95b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 1);
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 1);
	}
}
 80009f8:	e183      	b.n	8000d02 <display7SEG0+0x35e>
	else if (num == 1) {
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d123      	bne.n	8000a48 <display7SEG0+0xa4>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2101      	movs	r1, #1
 8000a04:	48ac      	ldr	r0, [pc, #688]	; (8000cb8 <display7SEG0+0x314>)
 8000a06:	f001 f952 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	48aa      	ldr	r0, [pc, #680]	; (8000cb8 <display7SEG0+0x314>)
 8000a10:	f001 f94d 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2104      	movs	r1, #4
 8000a18:	48a7      	ldr	r0, [pc, #668]	; (8000cb8 <display7SEG0+0x314>)
 8000a1a:	f001 f948 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2108      	movs	r1, #8
 8000a22:	48a5      	ldr	r0, [pc, #660]	; (8000cb8 <display7SEG0+0x314>)
 8000a24:	f001 f943 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	48a2      	ldr	r0, [pc, #648]	; (8000cb8 <display7SEG0+0x314>)
 8000a2e:	f001 f93e 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2120      	movs	r1, #32
 8000a36:	48a0      	ldr	r0, [pc, #640]	; (8000cb8 <display7SEG0+0x314>)
 8000a38:	f001 f939 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2140      	movs	r1, #64	; 0x40
 8000a40:	489d      	ldr	r0, [pc, #628]	; (8000cb8 <display7SEG0+0x314>)
 8000a42:	f001 f934 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000a46:	e15c      	b.n	8000d02 <display7SEG0+0x35e>
	else if (num == 2) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d123      	bne.n	8000a96 <display7SEG0+0xf2>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2101      	movs	r1, #1
 8000a52:	4899      	ldr	r0, [pc, #612]	; (8000cb8 <display7SEG0+0x314>)
 8000a54:	f001 f92b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	4896      	ldr	r0, [pc, #600]	; (8000cb8 <display7SEG0+0x314>)
 8000a5e:	f001 f926 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2104      	movs	r1, #4
 8000a66:	4894      	ldr	r0, [pc, #592]	; (8000cb8 <display7SEG0+0x314>)
 8000a68:	f001 f921 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2108      	movs	r1, #8
 8000a70:	4891      	ldr	r0, [pc, #580]	; (8000cb8 <display7SEG0+0x314>)
 8000a72:	f001 f91c 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2110      	movs	r1, #16
 8000a7a:	488f      	ldr	r0, [pc, #572]	; (8000cb8 <display7SEG0+0x314>)
 8000a7c:	f001 f917 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2120      	movs	r1, #32
 8000a84:	488c      	ldr	r0, [pc, #560]	; (8000cb8 <display7SEG0+0x314>)
 8000a86:	f001 f912 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	488a      	ldr	r0, [pc, #552]	; (8000cb8 <display7SEG0+0x314>)
 8000a90:	f001 f90d 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000a94:	e135      	b.n	8000d02 <display7SEG0+0x35e>
	else if (num == 3) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d123      	bne.n	8000ae4 <display7SEG0+0x140>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4885      	ldr	r0, [pc, #532]	; (8000cb8 <display7SEG0+0x314>)
 8000aa2:	f001 f904 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4883      	ldr	r0, [pc, #524]	; (8000cb8 <display7SEG0+0x314>)
 8000aac:	f001 f8ff 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	4880      	ldr	r0, [pc, #512]	; (8000cb8 <display7SEG0+0x314>)
 8000ab6:	f001 f8fa 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2108      	movs	r1, #8
 8000abe:	487e      	ldr	r0, [pc, #504]	; (8000cb8 <display7SEG0+0x314>)
 8000ac0:	f001 f8f5 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	487b      	ldr	r0, [pc, #492]	; (8000cb8 <display7SEG0+0x314>)
 8000aca:	f001 f8f0 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	4879      	ldr	r0, [pc, #484]	; (8000cb8 <display7SEG0+0x314>)
 8000ad4:	f001 f8eb 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	4876      	ldr	r0, [pc, #472]	; (8000cb8 <display7SEG0+0x314>)
 8000ade:	f001 f8e6 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000ae2:	e10e      	b.n	8000d02 <display7SEG0+0x35e>
	else if (num == 4) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	d123      	bne.n	8000b32 <display7SEG0+0x18e>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 1);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2101      	movs	r1, #1
 8000aee:	4872      	ldr	r0, [pc, #456]	; (8000cb8 <display7SEG0+0x314>)
 8000af0:	f001 f8dd 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2102      	movs	r1, #2
 8000af8:	486f      	ldr	r0, [pc, #444]	; (8000cb8 <display7SEG0+0x314>)
 8000afa:	f001 f8d8 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2104      	movs	r1, #4
 8000b02:	486d      	ldr	r0, [pc, #436]	; (8000cb8 <display7SEG0+0x314>)
 8000b04:	f001 f8d3 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 1);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	486a      	ldr	r0, [pc, #424]	; (8000cb8 <display7SEG0+0x314>)
 8000b0e:	f001 f8ce 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2110      	movs	r1, #16
 8000b16:	4868      	ldr	r0, [pc, #416]	; (8000cb8 <display7SEG0+0x314>)
 8000b18:	f001 f8c9 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2120      	movs	r1, #32
 8000b20:	4865      	ldr	r0, [pc, #404]	; (8000cb8 <display7SEG0+0x314>)
 8000b22:	f001 f8c4 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	4863      	ldr	r0, [pc, #396]	; (8000cb8 <display7SEG0+0x314>)
 8000b2c:	f001 f8bf 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000b30:	e0e7      	b.n	8000d02 <display7SEG0+0x35e>
	else if (num == 5) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b05      	cmp	r3, #5
 8000b36:	d123      	bne.n	8000b80 <display7SEG0+0x1dc>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	485e      	ldr	r0, [pc, #376]	; (8000cb8 <display7SEG0+0x314>)
 8000b3e:	f001 f8b6 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 1);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2102      	movs	r1, #2
 8000b46:	485c      	ldr	r0, [pc, #368]	; (8000cb8 <display7SEG0+0x314>)
 8000b48:	f001 f8b1 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2104      	movs	r1, #4
 8000b50:	4859      	ldr	r0, [pc, #356]	; (8000cb8 <display7SEG0+0x314>)
 8000b52:	f001 f8ac 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2108      	movs	r1, #8
 8000b5a:	4857      	ldr	r0, [pc, #348]	; (8000cb8 <display7SEG0+0x314>)
 8000b5c:	f001 f8a7 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2110      	movs	r1, #16
 8000b64:	4854      	ldr	r0, [pc, #336]	; (8000cb8 <display7SEG0+0x314>)
 8000b66:	f001 f8a2 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	4852      	ldr	r0, [pc, #328]	; (8000cb8 <display7SEG0+0x314>)
 8000b70:	f001 f89d 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	484f      	ldr	r0, [pc, #316]	; (8000cb8 <display7SEG0+0x314>)
 8000b7a:	f001 f898 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000b7e:	e0c0      	b.n	8000d02 <display7SEG0+0x35e>
	else if (num == 6) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d123      	bne.n	8000bce <display7SEG0+0x22a>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2101      	movs	r1, #1
 8000b8a:	484b      	ldr	r0, [pc, #300]	; (8000cb8 <display7SEG0+0x314>)
 8000b8c:	f001 f88f 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2102      	movs	r1, #2
 8000b94:	4848      	ldr	r0, [pc, #288]	; (8000cb8 <display7SEG0+0x314>)
 8000b96:	f001 f88a 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4846      	ldr	r0, [pc, #280]	; (8000cb8 <display7SEG0+0x314>)
 8000ba0:	f001 f885 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4843      	ldr	r0, [pc, #268]	; (8000cb8 <display7SEG0+0x314>)
 8000baa:	f001 f880 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	4841      	ldr	r0, [pc, #260]	; (8000cb8 <display7SEG0+0x314>)
 8000bb4:	f001 f87b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2120      	movs	r1, #32
 8000bbc:	483e      	ldr	r0, [pc, #248]	; (8000cb8 <display7SEG0+0x314>)
 8000bbe:	f001 f876 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	483c      	ldr	r0, [pc, #240]	; (8000cb8 <display7SEG0+0x314>)
 8000bc8:	f001 f871 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000bcc:	e099      	b.n	8000d02 <display7SEG0+0x35e>
	else if (num == 7) {
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b07      	cmp	r3, #7
 8000bd2:	d123      	bne.n	8000c1c <display7SEG0+0x278>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4837      	ldr	r0, [pc, #220]	; (8000cb8 <display7SEG0+0x314>)
 8000bda:	f001 f868 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2102      	movs	r1, #2
 8000be2:	4835      	ldr	r0, [pc, #212]	; (8000cb8 <display7SEG0+0x314>)
 8000be4:	f001 f863 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2104      	movs	r1, #4
 8000bec:	4832      	ldr	r0, [pc, #200]	; (8000cb8 <display7SEG0+0x314>)
 8000bee:	f001 f85e 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 1);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	4830      	ldr	r0, [pc, #192]	; (8000cb8 <display7SEG0+0x314>)
 8000bf8:	f001 f859 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2110      	movs	r1, #16
 8000c00:	482d      	ldr	r0, [pc, #180]	; (8000cb8 <display7SEG0+0x314>)
 8000c02:	f001 f854 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2120      	movs	r1, #32
 8000c0a:	482b      	ldr	r0, [pc, #172]	; (8000cb8 <display7SEG0+0x314>)
 8000c0c:	f001 f84f 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	4828      	ldr	r0, [pc, #160]	; (8000cb8 <display7SEG0+0x314>)
 8000c16:	f001 f84a 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000c1a:	e072      	b.n	8000d02 <display7SEG0+0x35e>
	else if (num == 8) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d123      	bne.n	8000c6a <display7SEG0+0x2c6>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2101      	movs	r1, #1
 8000c26:	4824      	ldr	r0, [pc, #144]	; (8000cb8 <display7SEG0+0x314>)
 8000c28:	f001 f841 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4821      	ldr	r0, [pc, #132]	; (8000cb8 <display7SEG0+0x314>)
 8000c32:	f001 f83c 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2104      	movs	r1, #4
 8000c3a:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <display7SEG0+0x314>)
 8000c3c:	f001 f837 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2108      	movs	r1, #8
 8000c44:	481c      	ldr	r0, [pc, #112]	; (8000cb8 <display7SEG0+0x314>)
 8000c46:	f001 f832 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <display7SEG0+0x314>)
 8000c50:	f001 f82d 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2120      	movs	r1, #32
 8000c58:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <display7SEG0+0x314>)
 8000c5a:	f001 f828 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <display7SEG0+0x314>)
 8000c64:	f001 f823 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000c68:	e04b      	b.n	8000d02 <display7SEG0+0x35e>
	else if (num == 9) {
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b09      	cmp	r3, #9
 8000c6e:	d125      	bne.n	8000cbc <display7SEG0+0x318>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2101      	movs	r1, #1
 8000c74:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <display7SEG0+0x314>)
 8000c76:	f001 f81a 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <display7SEG0+0x314>)
 8000c80:	f001 f815 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2104      	movs	r1, #4
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <display7SEG0+0x314>)
 8000c8a:	f001 f810 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <display7SEG0+0x314>)
 8000c94:	f001 f80b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <display7SEG0+0x314>)
 8000c9e:	f001 f806 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <display7SEG0+0x314>)
 8000ca8:	f001 f801 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	4801      	ldr	r0, [pc, #4]	; (8000cb8 <display7SEG0+0x314>)
 8000cb2:	f000 fffc 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000cb6:	e024      	b.n	8000d02 <display7SEG0+0x35e>
 8000cb8:	40010c00 	.word	0x40010c00
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4812      	ldr	r0, [pc, #72]	; (8000d0c <display7SEG0+0x368>)
 8000cc2:	f000 fff4 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 1);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2102      	movs	r1, #2
 8000cca:	4810      	ldr	r0, [pc, #64]	; (8000d0c <display7SEG0+0x368>)
 8000ccc:	f000 ffef 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <display7SEG0+0x368>)
 8000cd6:	f000 ffea 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 1);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2108      	movs	r1, #8
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <display7SEG0+0x368>)
 8000ce0:	f000 ffe5 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <display7SEG0+0x368>)
 8000cea:	f000 ffe0 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <display7SEG0+0x368>)
 8000cf4:	f000 ffdb 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 1);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <display7SEG0+0x368>)
 8000cfe:	f000 ffd6 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40010c00 	.word	0x40010c00

08000d10 <display7SEG1>:

void display7SEG1(int num) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d129      	bne.n	8000d72 <display7SEG1+0x62>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	48c8      	ldr	r0, [pc, #800]	; (8001044 <display7SEG1+0x334>)
 8000d24:	f000 ffc3 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2e:	48c5      	ldr	r0, [pc, #788]	; (8001044 <display7SEG1+0x334>)
 8000d30:	f000 ffbd 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3a:	48c2      	ldr	r0, [pc, #776]	; (8001044 <display7SEG1+0x334>)
 8000d3c:	f000 ffb7 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d46:	48bf      	ldr	r0, [pc, #764]	; (8001044 <display7SEG1+0x334>)
 8000d48:	f000 ffb1 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d52:	48bc      	ldr	r0, [pc, #752]	; (8001044 <display7SEG1+0x334>)
 8000d54:	f000 ffab 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5e:	48b9      	ldr	r0, [pc, #740]	; (8001044 <display7SEG1+0x334>)
 8000d60:	f000 ffa5 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6a:	48b6      	ldr	r0, [pc, #728]	; (8001044 <display7SEG1+0x334>)
 8000d6c:	f000 ff9f 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 1);
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 1);
	}
}
 8000d70:	e1c0      	b.n	80010f4 <display7SEG1+0x3e4>
	else if (num == 1) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d129      	bne.n	8000dcc <display7SEG1+0xbc>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	48b1      	ldr	r0, [pc, #708]	; (8001044 <display7SEG1+0x334>)
 8000d7e:	f000 ff96 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d88:	48ae      	ldr	r0, [pc, #696]	; (8001044 <display7SEG1+0x334>)
 8000d8a:	f000 ff90 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d94:	48ab      	ldr	r0, [pc, #684]	; (8001044 <display7SEG1+0x334>)
 8000d96:	f000 ff8a 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da0:	48a8      	ldr	r0, [pc, #672]	; (8001044 <display7SEG1+0x334>)
 8000da2:	f000 ff84 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dac:	48a5      	ldr	r0, [pc, #660]	; (8001044 <display7SEG1+0x334>)
 8000dae:	f000 ff7e 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db8:	48a2      	ldr	r0, [pc, #648]	; (8001044 <display7SEG1+0x334>)
 8000dba:	f000 ff78 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 1);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc4:	489f      	ldr	r0, [pc, #636]	; (8001044 <display7SEG1+0x334>)
 8000dc6:	f000 ff72 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000dca:	e193      	b.n	80010f4 <display7SEG1+0x3e4>
	else if (num == 2) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d129      	bne.n	8000e26 <display7SEG1+0x116>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	489b      	ldr	r0, [pc, #620]	; (8001044 <display7SEG1+0x334>)
 8000dd8:	f000 ff69 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de2:	4898      	ldr	r0, [pc, #608]	; (8001044 <display7SEG1+0x334>)
 8000de4:	f000 ff63 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dee:	4895      	ldr	r0, [pc, #596]	; (8001044 <display7SEG1+0x334>)
 8000df0:	f000 ff5d 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfa:	4892      	ldr	r0, [pc, #584]	; (8001044 <display7SEG1+0x334>)
 8000dfc:	f000 ff57 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e06:	488f      	ldr	r0, [pc, #572]	; (8001044 <display7SEG1+0x334>)
 8000e08:	f000 ff51 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e12:	488c      	ldr	r0, [pc, #560]	; (8001044 <display7SEG1+0x334>)
 8000e14:	f000 ff4b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1e:	4889      	ldr	r0, [pc, #548]	; (8001044 <display7SEG1+0x334>)
 8000e20:	f000 ff45 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000e24:	e166      	b.n	80010f4 <display7SEG1+0x3e4>
	else if (num == 3) {
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d129      	bne.n	8000e80 <display7SEG1+0x170>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	4884      	ldr	r0, [pc, #528]	; (8001044 <display7SEG1+0x334>)
 8000e32:	f000 ff3c 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3c:	4881      	ldr	r0, [pc, #516]	; (8001044 <display7SEG1+0x334>)
 8000e3e:	f000 ff36 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e48:	487e      	ldr	r0, [pc, #504]	; (8001044 <display7SEG1+0x334>)
 8000e4a:	f000 ff30 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e54:	487b      	ldr	r0, [pc, #492]	; (8001044 <display7SEG1+0x334>)
 8000e56:	f000 ff2a 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e60:	4878      	ldr	r0, [pc, #480]	; (8001044 <display7SEG1+0x334>)
 8000e62:	f000 ff24 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6c:	4875      	ldr	r0, [pc, #468]	; (8001044 <display7SEG1+0x334>)
 8000e6e:	f000 ff1e 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e78:	4872      	ldr	r0, [pc, #456]	; (8001044 <display7SEG1+0x334>)
 8000e7a:	f000 ff18 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000e7e:	e139      	b.n	80010f4 <display7SEG1+0x3e4>
	else if (num == 4) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d129      	bne.n	8000eda <display7SEG1+0x1ca>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	486e      	ldr	r0, [pc, #440]	; (8001044 <display7SEG1+0x334>)
 8000e8c:	f000 ff0f 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e96:	486b      	ldr	r0, [pc, #428]	; (8001044 <display7SEG1+0x334>)
 8000e98:	f000 ff09 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea2:	4868      	ldr	r0, [pc, #416]	; (8001044 <display7SEG1+0x334>)
 8000ea4:	f000 ff03 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eae:	4865      	ldr	r0, [pc, #404]	; (8001044 <display7SEG1+0x334>)
 8000eb0:	f000 fefd 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eba:	4862      	ldr	r0, [pc, #392]	; (8001044 <display7SEG1+0x334>)
 8000ebc:	f000 fef7 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec6:	485f      	ldr	r0, [pc, #380]	; (8001044 <display7SEG1+0x334>)
 8000ec8:	f000 fef1 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed2:	485c      	ldr	r0, [pc, #368]	; (8001044 <display7SEG1+0x334>)
 8000ed4:	f000 feeb 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000ed8:	e10c      	b.n	80010f4 <display7SEG1+0x3e4>
	else if (num == 5) {
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d129      	bne.n	8000f34 <display7SEG1+0x224>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	4857      	ldr	r0, [pc, #348]	; (8001044 <display7SEG1+0x334>)
 8000ee6:	f000 fee2 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	4854      	ldr	r0, [pc, #336]	; (8001044 <display7SEG1+0x334>)
 8000ef2:	f000 fedc 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efc:	4851      	ldr	r0, [pc, #324]	; (8001044 <display7SEG1+0x334>)
 8000efe:	f000 fed6 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f08:	484e      	ldr	r0, [pc, #312]	; (8001044 <display7SEG1+0x334>)
 8000f0a:	f000 fed0 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f14:	484b      	ldr	r0, [pc, #300]	; (8001044 <display7SEG1+0x334>)
 8000f16:	f000 feca 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f20:	4848      	ldr	r0, [pc, #288]	; (8001044 <display7SEG1+0x334>)
 8000f22:	f000 fec4 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2c:	4845      	ldr	r0, [pc, #276]	; (8001044 <display7SEG1+0x334>)
 8000f2e:	f000 febe 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000f32:	e0df      	b.n	80010f4 <display7SEG1+0x3e4>
	else if (num == 6) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d129      	bne.n	8000f8e <display7SEG1+0x27e>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	4841      	ldr	r0, [pc, #260]	; (8001044 <display7SEG1+0x334>)
 8000f40:	f000 feb5 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	483e      	ldr	r0, [pc, #248]	; (8001044 <display7SEG1+0x334>)
 8000f4c:	f000 feaf 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f56:	483b      	ldr	r0, [pc, #236]	; (8001044 <display7SEG1+0x334>)
 8000f58:	f000 fea9 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f62:	4838      	ldr	r0, [pc, #224]	; (8001044 <display7SEG1+0x334>)
 8000f64:	f000 fea3 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6e:	4835      	ldr	r0, [pc, #212]	; (8001044 <display7SEG1+0x334>)
 8000f70:	f000 fe9d 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7a:	4832      	ldr	r0, [pc, #200]	; (8001044 <display7SEG1+0x334>)
 8000f7c:	f000 fe97 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f86:	482f      	ldr	r0, [pc, #188]	; (8001044 <display7SEG1+0x334>)
 8000f88:	f000 fe91 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000f8c:	e0b2      	b.n	80010f4 <display7SEG1+0x3e4>
	else if (num == 7) {
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	d129      	bne.n	8000fe8 <display7SEG1+0x2d8>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	482a      	ldr	r0, [pc, #168]	; (8001044 <display7SEG1+0x334>)
 8000f9a:	f000 fe88 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	4827      	ldr	r0, [pc, #156]	; (8001044 <display7SEG1+0x334>)
 8000fa6:	f000 fe82 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb0:	4824      	ldr	r0, [pc, #144]	; (8001044 <display7SEG1+0x334>)
 8000fb2:	f000 fe7c 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbc:	4821      	ldr	r0, [pc, #132]	; (8001044 <display7SEG1+0x334>)
 8000fbe:	f000 fe76 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc8:	481e      	ldr	r0, [pc, #120]	; (8001044 <display7SEG1+0x334>)
 8000fca:	f000 fe70 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd4:	481b      	ldr	r0, [pc, #108]	; (8001044 <display7SEG1+0x334>)
 8000fd6:	f000 fe6a 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 1);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe0:	4818      	ldr	r0, [pc, #96]	; (8001044 <display7SEG1+0x334>)
 8000fe2:	f000 fe64 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000fe6:	e085      	b.n	80010f4 <display7SEG1+0x3e4>
	else if (num == 8) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d12c      	bne.n	8001048 <display7SEG1+0x338>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	4814      	ldr	r0, [pc, #80]	; (8001044 <display7SEG1+0x334>)
 8000ff4:	f000 fe5b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <display7SEG1+0x334>)
 8001000:	f000 fe55 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	480e      	ldr	r0, [pc, #56]	; (8001044 <display7SEG1+0x334>)
 800100c:	f000 fe4f 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <display7SEG1+0x334>)
 8001018:	f000 fe49 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <display7SEG1+0x334>)
 8001024:	f000 fe43 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <display7SEG1+0x334>)
 8001030:	f000 fe3d 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103a:	4802      	ldr	r0, [pc, #8]	; (8001044 <display7SEG1+0x334>)
 800103c:	f000 fe37 	bl	8001cae <HAL_GPIO_WritePin>
}
 8001040:	e058      	b.n	80010f4 <display7SEG1+0x3e4>
 8001042:	bf00      	nop
 8001044:	40010c00 	.word	0x40010c00
	else if (num == 9) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b09      	cmp	r3, #9
 800104c:	d129      	bne.n	80010a2 <display7SEG1+0x392>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	482a      	ldr	r0, [pc, #168]	; (80010fc <display7SEG1+0x3ec>)
 8001054:	f000 fe2b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105e:	4827      	ldr	r0, [pc, #156]	; (80010fc <display7SEG1+0x3ec>)
 8001060:	f000 fe25 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4824      	ldr	r0, [pc, #144]	; (80010fc <display7SEG1+0x3ec>)
 800106c:	f000 fe1f 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4821      	ldr	r0, [pc, #132]	; (80010fc <display7SEG1+0x3ec>)
 8001078:	f000 fe19 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001082:	481e      	ldr	r0, [pc, #120]	; (80010fc <display7SEG1+0x3ec>)
 8001084:	f000 fe13 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	481b      	ldr	r0, [pc, #108]	; (80010fc <display7SEG1+0x3ec>)
 8001090:	f000 fe0d 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109a:	4818      	ldr	r0, [pc, #96]	; (80010fc <display7SEG1+0x3ec>)
 800109c:	f000 fe07 	bl	8001cae <HAL_GPIO_WritePin>
}
 80010a0:	e028      	b.n	80010f4 <display7SEG1+0x3e4>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	4815      	ldr	r0, [pc, #84]	; (80010fc <display7SEG1+0x3ec>)
 80010a8:	f000 fe01 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <display7SEG1+0x3ec>)
 80010b4:	f000 fdfb 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010be:	480f      	ldr	r0, [pc, #60]	; (80010fc <display7SEG1+0x3ec>)
 80010c0:	f000 fdf5 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <display7SEG1+0x3ec>)
 80010cc:	f000 fdef 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d6:	4809      	ldr	r0, [pc, #36]	; (80010fc <display7SEG1+0x3ec>)
 80010d8:	f000 fde9 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <display7SEG1+0x3ec>)
 80010e4:	f000 fde3 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <display7SEG1+0x3ec>)
 80010f0:	f000 fddd 	bl	8001cae <HAL_GPIO_WritePin>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010c00 	.word	0x40010c00

08001100 <updateSEGBuffer>:
int timeYellow = 2;

int SEG_buffer[4] = {0, 0, 0, 0};


void updateSEGBuffer(int s0, int s1, int s2, int s3) {
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
	SEG_buffer[0] = s0;
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <updateSEGBuffer+0x30>)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6013      	str	r3, [r2, #0]
	SEG_buffer[1] = s1;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <updateSEGBuffer+0x30>)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	6053      	str	r3, [r2, #4]
	SEG_buffer[2] = s2;
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <updateSEGBuffer+0x30>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6093      	str	r3, [r2, #8]
	SEG_buffer[3] = s3;
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <updateSEGBuffer+0x30>)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	60d3      	str	r3, [r2, #12]
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000094 	.word	0x20000094

08001134 <update7SEG>:

void update7SEG(int index) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	switch (index) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <update7SEG+0x16>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d017      	beq.n	8001178 <update7SEG+0x44>
		display7SEG1(SEG_buffer[3]);
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 8001148:	e02d      	b.n	80011a6 <update7SEG+0x72>
		display7SEG0(SEG_buffer[0]);
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <update7SEG+0x7c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fc28 	bl	80009a4 <display7SEG0>
		display7SEG1(SEG_buffer[1]);
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <update7SEG+0x7c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fdd9 	bl	8000d10 <display7SEG1>
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <update7SEG+0x80>)
 8001166:	f000 fda2 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <update7SEG+0x80>)
 8001172:	f000 fd9c 	bl	8001cae <HAL_GPIO_WritePin>
		break;
 8001176:	e016      	b.n	80011a6 <update7SEG+0x72>
		display7SEG0(SEG_buffer[2]);
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <update7SEG+0x7c>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fc11 	bl	80009a4 <display7SEG0>
		display7SEG1(SEG_buffer[3]);
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <update7SEG+0x7c>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fdc2 	bl	8000d10 <display7SEG1>
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <update7SEG+0x80>)
 8001194:	f000 fd8b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <update7SEG+0x80>)
 80011a0:	f000 fd85 	bl	8001cae <HAL_GPIO_WritePin>
		break;
 80011a4:	bf00      	nop
	}
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000094 	.word	0x20000094
 80011b4:	40010800 	.word	0x40010800

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011be:	f000 fa75 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c2:	f000 f82b 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c6:	f000 f8b1 	bl	800132c <MX_GPIO_Init>
  MX_TIM2_Init();
 80011ca:	f000 f863 	bl	8001294 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011ce:	4810      	ldr	r0, [pc, #64]	; (8001210 <main+0x58>)
 80011d0:	f001 f9d6 	bl	8002580 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = 0;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <main+0x5c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
  int index = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  setTimer0(10);
 80011de:	200a      	movs	r0, #10
 80011e0:	f000 f91a 	bl	8001418 <setTimer0>
  while (1)
  {

	  if (timer0_flag == 1) {
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <main+0x60>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d10e      	bne.n	800120a <main+0x52>
		  update7SEG(index);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ffa1 	bl	8001134 <update7SEG>
		  index++;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3301      	adds	r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
		  if (index == 2) index = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d101      	bne.n	8001202 <main+0x4a>
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
		  setTimer0(500);
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f000 f907 	bl	8001418 <setTimer0>
	  }
	  fsm_run();
 800120a:	f7ff f8a1 	bl	8000350 <fsm_run>
	  if (timer0_flag == 1) {
 800120e:	e7e9      	b.n	80011e4 <main+0x2c>
 8001210:	200000bc 	.word	0x200000bc
 8001214:	20000090 	.word	0x20000090
 8001218:	200000a8 	.word	0x200000a8

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b090      	sub	sp, #64	; 0x40
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	2228      	movs	r2, #40	; 0x28
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fd60 	bl	8002cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001242:	2301      	movs	r3, #1
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001246:	2310      	movs	r3, #16
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fd5c 	bl	8001d10 <HAL_RCC_OscConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800125e:	f000 f8d5 	bl	800140c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	230f      	movs	r3, #15
 8001264:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f000 ffc8 	bl	8002210 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001286:	f000 f8c1 	bl	800140c <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3740      	adds	r7, #64	; 0x40
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_TIM2_Init+0x94>)
 80012b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_TIM2_Init+0x94>)
 80012ba:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_TIM2_Init+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_TIM2_Init+0x94>)
 80012c8:	2209      	movs	r2, #9
 80012ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_TIM2_Init+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_TIM2_Init+0x94>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <MX_TIM2_Init+0x94>)
 80012da:	f001 f901 	bl	80024e0 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012e4:	f000 f892 	bl	800140c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <MX_TIM2_Init+0x94>)
 80012f6:	f001 fa97 	bl	8002828 <HAL_TIM_ConfigClockSource>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001300:	f000 f884 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_TIM2_Init+0x94>)
 8001312:	f001 fc5f 	bl	8002bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800131c:	f000 f876 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200000bc 	.word	0x200000bc

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <MX_GPIO_Init+0xbc>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <MX_GPIO_Init+0xbc>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <MX_GPIO_Init+0xbc>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <MX_GPIO_Init+0xbc>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <MX_GPIO_Init+0xbc>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_GPIO_Init+0xbc>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_0_Pin|LED_GREEN_0_Pin|LED_YELLOW_0_Pin|LED_RED_1_Pin
 8001370:	2200      	movs	r2, #0
 8001372:	f24c 71e0 	movw	r1, #51168	; 0xc7e0
 8001376:	481d      	ldr	r0, [pc, #116]	; (80013ec <MX_GPIO_Init+0xc0>)
 8001378:	f000 fc99 	bl	8001cae <HAL_GPIO_WritePin>
                          |LED_GREEN_1_Pin|LED_YELLOW_1_Pin|EN_0_Pin|EN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_0_Pin|SEG_B_0_Pin|SEG_C_0_Pin|SEG_D_1_Pin
 800137c:	2200      	movs	r2, #0
 800137e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001382:	481b      	ldr	r0, [pc, #108]	; (80013f0 <MX_GPIO_Init+0xc4>)
 8001384:	f000 fc93 	bl	8001cae <HAL_GPIO_WritePin>
                          |SEG_E_0_Pin|SEG_F_0_Pin|SEG_G_0_Pin|SEG_A_1_Pin
                          |SEG_B_1_Pin|SEG_C_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_0_Pin LED_GREEN_0_Pin LED_YELLOW_0_Pin LED_RED_1_Pin
                           LED_GREEN_1_Pin LED_YELLOW_1_Pin EN_0_Pin EN_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_0_Pin|LED_GREEN_0_Pin|LED_YELLOW_0_Pin|LED_RED_1_Pin
 8001388:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
 800138c:	60bb      	str	r3, [r7, #8]
                          |LED_GREEN_1_Pin|LED_YELLOW_1_Pin|EN_0_Pin|EN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2302      	movs	r3, #2
 8001398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4619      	mov	r1, r3
 80013a0:	4812      	ldr	r0, [pc, #72]	; (80013ec <MX_GPIO_Init+0xc0>)
 80013a2:	f000 faf3 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_0_Pin SEG_B_0_Pin SEG_C_0_Pin SEG_D_1_Pin
                           SEG_E_1_Pin SEG_F_1_Pin SEG_G_1_Pin SEG_D_0_Pin
                           SEG_E_0_Pin SEG_F_0_Pin SEG_G_0_Pin SEG_A_1_Pin
                           SEG_B_1_Pin SEG_C_1_Pin */
  GPIO_InitStruct.Pin = SEG_A_0_Pin|SEG_B_0_Pin|SEG_C_0_Pin|SEG_D_1_Pin
 80013a6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80013aa:	60bb      	str	r3, [r7, #8]
                          |SEG_E_1_Pin|SEG_F_1_Pin|SEG_G_1_Pin|SEG_D_0_Pin
                          |SEG_E_0_Pin|SEG_F_0_Pin|SEG_G_0_Pin|SEG_A_1_Pin
                          |SEG_B_1_Pin|SEG_C_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2302      	movs	r3, #2
 80013b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_GPIO_Init+0xc4>)
 80013c0:	f000 fae4 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_TIME_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_TIME_Pin|BUTTON_SET_Pin;
 80013c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4619      	mov	r1, r3
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_GPIO_Init+0xc0>)
 80013da:	f000 fad7 	bl	800198c <HAL_GPIO_Init>

}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010800 	.word	0x40010800
 80013f0:	40010c00 	.word	0x40010c00

080013f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	timerRun();
 80013fc:	f000 f860 	bl	80014c0 <timerRun>
	getKeyInput();
 8001400:	f7fe ff32 	bl	8000268 <getKeyInput>
	//getKeyInputMODE();
	//getKeyInputSET();
	//getKeyInputTIME();
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>
	...

08001418 <setTimer0>:
int timer1_flag = 0;

int timer2_counter = 0;
int timer2_flag = 0;

void setTimer0(int duration) {
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TICK;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <setTimer0+0x2c>)
 8001424:	fb82 1203 	smull	r1, r2, r2, r3
 8001428:	1092      	asrs	r2, r2, #2
 800142a:	17db      	asrs	r3, r3, #31
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	4a06      	ldr	r2, [pc, #24]	; (8001448 <setTimer0+0x30>)
 8001430:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <setTimer0+0x34>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	66666667 	.word	0x66666667
 8001448:	200000a4 	.word	0x200000a4
 800144c:	200000a8 	.word	0x200000a8

08001450 <setTimer1>:

void setTimer1(int duration) {
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <setTimer1+0x2c>)
 800145c:	fb82 1203 	smull	r1, r2, r2, r3
 8001460:	1092      	asrs	r2, r2, #2
 8001462:	17db      	asrs	r3, r3, #31
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	4a06      	ldr	r2, [pc, #24]	; (8001480 <setTimer1+0x30>)
 8001468:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <setTimer1+0x34>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	66666667 	.word	0x66666667
 8001480:	200000ac 	.word	0x200000ac
 8001484:	200000b0 	.word	0x200000b0

08001488 <setTimer2>:

void setTimer2(int duration) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TICK;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <setTimer2+0x2c>)
 8001494:	fb82 1203 	smull	r1, r2, r2, r3
 8001498:	1092      	asrs	r2, r2, #2
 800149a:	17db      	asrs	r3, r3, #31
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <setTimer2+0x30>)
 80014a0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <setTimer2+0x34>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	66666667 	.word	0x66666667
 80014b8:	200000b4 	.word	0x200000b4
 80014bc:	200000b8 	.word	0x200000b8

080014c0 <timerRun>:


void timerRun() {
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <timerRun+0x6c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	dd0b      	ble.n	80014e4 <timerRun+0x24>
		timer0_counter--;
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <timerRun+0x6c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	4a16      	ldr	r2, [pc, #88]	; (800152c <timerRun+0x6c>)
 80014d4:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0) {
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <timerRun+0x6c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	dc02      	bgt.n	80014e4 <timerRun+0x24>
			timer0_flag = 1;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <timerRun+0x70>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer1_counter > 0) {
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <timerRun+0x74>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dd0b      	ble.n	8001504 <timerRun+0x44>
		timer1_counter--;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <timerRun+0x74>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <timerRun+0x74>)
 80014f4:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <timerRun+0x74>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	dc02      	bgt.n	8001504 <timerRun+0x44>
			timer1_flag = 1;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <timerRun+0x78>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0) {
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <timerRun+0x7c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	dd0b      	ble.n	8001524 <timerRun+0x64>
		timer2_counter--;
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <timerRun+0x7c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <timerRun+0x7c>)
 8001514:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <timerRun+0x7c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	dc02      	bgt.n	8001524 <timerRun+0x64>
			timer2_flag = 1;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <timerRun+0x80>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	200000a4 	.word	0x200000a4
 8001530:	200000a8 	.word	0x200000a8
 8001534:	200000ac 	.word	0x200000ac
 8001538:	200000b0 	.word	0x200000b0
 800153c:	200000b4 	.word	0x200000b4
 8001540:	200000b8 	.word	0x200000b8

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_MspInit+0x5c>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_MspInit+0x5c>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_MspInit+0x5c>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_MspInit+0x5c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_MspInit+0x5c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_MspInit+0x60>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_MspInit+0x60>)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010000 	.word	0x40010000

080015a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b8:	d113      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_TIM_Base_MspInit+0x44>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <HAL_TIM_Base_MspInit+0x44>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_TIM_Base_MspInit+0x44>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	201c      	movs	r0, #28
 80015d8:	f000 f9a1 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015dc:	201c      	movs	r0, #28
 80015de:	f000 f9ba 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001636:	f000 f87f 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <TIM2_IRQHandler+0x10>)
 8001646:	f000 ffe7 	bl	8002618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200000bc 	.word	0x200000bc

08001654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001662:	490d      	ldr	r1, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001678:	4c0a      	ldr	r4, [pc, #40]	; (80016a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001686:	f7ff ffe5 	bl	8001654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f001 fb0d 	bl	8002ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168e:	f7ff fd93 	bl	80011b8 <main>
  bx lr
 8001692:	4770      	bx	lr
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800169c:	08002d40 	.word	0x08002d40
  ldr r2, =_sbss
 80016a0:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80016a4:	20000108 	.word	0x20000108

080016a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC1_2_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_Init+0x28>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_Init+0x28>)
 80016b6:	f043 0310 	orr.w	r3, r3, #16
 80016ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f923 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	200f      	movs	r0, #15
 80016c4:	f000 f808 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff ff3c 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f93b 	bl	8001972 <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f903 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_InitTick+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000003c 	.word	0x2000003c
 8001730:	20000044 	.word	0x20000044
 8001734:	20000040 	.word	0x20000040

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a03      	ldr	r2, [pc, #12]	; (8001758 <HAL_IncTick+0x20>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	20000044 	.word	0x20000044
 8001758:	20000104 	.word	0x20000104

0800175c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_GetTick+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000104 	.word	0x20000104

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4906      	ldr	r1, [pc, #24]	; (8001808 <__NVIC_EnableIRQ+0x34>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff90 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff2d 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff42 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff90 	bl	8001860 <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5f 	bl	800180c <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff35 	bl	80017d4 <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800198c:	b480      	push	{r7}
 800198e:	b08b      	sub	sp, #44	; 0x2c
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199e:	e148      	b.n	8001c32 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019a0:	2201      	movs	r2, #1
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f040 8137 	bne.w	8001c2c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4aa3      	ldr	r2, [pc, #652]	; (8001c50 <HAL_GPIO_Init+0x2c4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d05e      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
 80019c8:	4aa1      	ldr	r2, [pc, #644]	; (8001c50 <HAL_GPIO_Init+0x2c4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d875      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 80019ce:	4aa1      	ldr	r2, [pc, #644]	; (8001c54 <HAL_GPIO_Init+0x2c8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d058      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
 80019d4:	4a9f      	ldr	r2, [pc, #636]	; (8001c54 <HAL_GPIO_Init+0x2c8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d86f      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 80019da:	4a9f      	ldr	r2, [pc, #636]	; (8001c58 <HAL_GPIO_Init+0x2cc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d052      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
 80019e0:	4a9d      	ldr	r2, [pc, #628]	; (8001c58 <HAL_GPIO_Init+0x2cc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d869      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 80019e6:	4a9d      	ldr	r2, [pc, #628]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d04c      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
 80019ec:	4a9b      	ldr	r2, [pc, #620]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d863      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 80019f2:	4a9b      	ldr	r2, [pc, #620]	; (8001c60 <HAL_GPIO_Init+0x2d4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d046      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
 80019f8:	4a99      	ldr	r2, [pc, #612]	; (8001c60 <HAL_GPIO_Init+0x2d4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d85d      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 80019fe:	2b12      	cmp	r3, #18
 8001a00:	d82a      	bhi.n	8001a58 <HAL_GPIO_Init+0xcc>
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d859      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 8001a06:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <HAL_GPIO_Init+0x80>)
 8001a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0c:	08001a87 	.word	0x08001a87
 8001a10:	08001a61 	.word	0x08001a61
 8001a14:	08001a73 	.word	0x08001a73
 8001a18:	08001ab5 	.word	0x08001ab5
 8001a1c:	08001abb 	.word	0x08001abb
 8001a20:	08001abb 	.word	0x08001abb
 8001a24:	08001abb 	.word	0x08001abb
 8001a28:	08001abb 	.word	0x08001abb
 8001a2c:	08001abb 	.word	0x08001abb
 8001a30:	08001abb 	.word	0x08001abb
 8001a34:	08001abb 	.word	0x08001abb
 8001a38:	08001abb 	.word	0x08001abb
 8001a3c:	08001abb 	.word	0x08001abb
 8001a40:	08001abb 	.word	0x08001abb
 8001a44:	08001abb 	.word	0x08001abb
 8001a48:	08001abb 	.word	0x08001abb
 8001a4c:	08001abb 	.word	0x08001abb
 8001a50:	08001a69 	.word	0x08001a69
 8001a54:	08001a7d 	.word	0x08001a7d
 8001a58:	4a82      	ldr	r2, [pc, #520]	; (8001c64 <HAL_GPIO_Init+0x2d8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a5e:	e02c      	b.n	8001aba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e029      	b.n	8001abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	623b      	str	r3, [r7, #32]
          break;
 8001a70:	e024      	b.n	8001abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	3308      	adds	r3, #8
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e01f      	b.n	8001abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	330c      	adds	r3, #12
 8001a82:	623b      	str	r3, [r7, #32]
          break;
 8001a84:	e01a      	b.n	8001abc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e013      	b.n	8001abc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	611a      	str	r2, [r3, #16]
          break;
 8001aa6:	e009      	b.n	8001abc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	615a      	str	r2, [r3, #20]
          break;
 8001ab2:	e003      	b.n	8001abc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x130>
          break;
 8001aba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2bff      	cmp	r3, #255	; 0xff
 8001ac0:	d801      	bhi.n	8001ac6 <HAL_GPIO_Init+0x13a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	e001      	b.n	8001aca <HAL_GPIO_Init+0x13e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2bff      	cmp	r3, #255	; 0xff
 8001ad0:	d802      	bhi.n	8001ad8 <HAL_GPIO_Init+0x14c>
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	e002      	b.n	8001ade <HAL_GPIO_Init+0x152>
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	3b08      	subs	r3, #8
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	210f      	movs	r1, #15
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	401a      	ands	r2, r3
 8001af0:	6a39      	ldr	r1, [r7, #32]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	431a      	orrs	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8090 	beq.w	8001c2c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0c:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a55      	ldr	r2, [pc, #340]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b24:	4a51      	ldr	r2, [pc, #324]	; (8001c6c <HAL_GPIO_Init+0x2e0>)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a49      	ldr	r2, [pc, #292]	; (8001c70 <HAL_GPIO_Init+0x2e4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00d      	beq.n	8001b6c <HAL_GPIO_Init+0x1e0>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <HAL_GPIO_Init+0x2e8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0x1dc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a47      	ldr	r2, [pc, #284]	; (8001c78 <HAL_GPIO_Init+0x2ec>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d101      	bne.n	8001b64 <HAL_GPIO_Init+0x1d8>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e004      	b.n	8001b6e <HAL_GPIO_Init+0x1e2>
 8001b64:	2303      	movs	r3, #3
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0x1e2>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_GPIO_Init+0x1e2>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	f002 0203 	and.w	r2, r2, #3
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4093      	lsls	r3, r2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b7e:	493b      	ldr	r1, [pc, #236]	; (8001c6c <HAL_GPIO_Init+0x2e0>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4937      	ldr	r1, [pc, #220]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba6:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4933      	ldr	r1, [pc, #204]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	492d      	ldr	r1, [pc, #180]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bce:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4929      	ldr	r1, [pc, #164]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4923      	ldr	r1, [pc, #140]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	491f      	ldr	r1, [pc, #124]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	4919      	ldr	r1, [pc, #100]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4915      	ldr	r1, [pc, #84]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	3301      	adds	r3, #1
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f47f aeaf 	bne.w	80019a0 <HAL_GPIO_Init+0x14>
  }
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	372c      	adds	r7, #44	; 0x2c
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	10320000 	.word	0x10320000
 8001c54:	10310000 	.word	0x10310000
 8001c58:	10220000 	.word	0x10220000
 8001c5c:	10210000 	.word	0x10210000
 8001c60:	10120000 	.word	0x10120000
 8001c64:	10110000 	.word	0x10110000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	40010800 	.word	0x40010800
 8001c74:	40010c00 	.word	0x40010c00
 8001c78:	40011000 	.word	0x40011000
 8001c7c:	40010400 	.word	0x40010400

08001c80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e001      	b.n	8001ca2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cbe:	787b      	ldrb	r3, [r7, #1]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc4:	887a      	ldrh	r2, [r7, #2]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cca:	e003      	b.n	8001cd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	041a      	lsls	r2, r3, #16
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	611a      	str	r2, [r3, #16]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf0:	887a      	ldrh	r2, [r7, #2]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	041a      	lsls	r2, r3, #16
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	400b      	ands	r3, r1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	611a      	str	r2, [r3, #16]
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e26c      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8087 	beq.w	8001e3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d30:	4b92      	ldr	r3, [pc, #584]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d00c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d3c:	4b8f      	ldr	r3, [pc, #572]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d112      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5e>
 8001d48:	4b8c      	ldr	r3, [pc, #560]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d10b      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	4b89      	ldr	r3, [pc, #548]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d06c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x12c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d168      	bne.n	8001e3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e246      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x76>
 8001d78:	4b80      	ldr	r3, [pc, #512]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a7f      	ldr	r2, [pc, #508]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	e02e      	b.n	8001de4 <HAL_RCC_OscConfig+0xd4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x98>
 8001d8e:	4b7b      	ldr	r3, [pc, #492]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7a      	ldr	r2, [pc, #488]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b78      	ldr	r3, [pc, #480]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a77      	ldr	r2, [pc, #476]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0xd4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0xbc>
 8001db2:	4b72      	ldr	r3, [pc, #456]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a71      	ldr	r2, [pc, #452]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b6f      	ldr	r3, [pc, #444]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a6e      	ldr	r2, [pc, #440]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0xd4>
 8001dcc:	4b6b      	ldr	r3, [pc, #428]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6a      	ldr	r2, [pc, #424]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a67      	ldr	r2, [pc, #412]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fcb6 	bl	800175c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fcb2 	bl	800175c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e1fa      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0xe4>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff fca2 	bl	800175c <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fc9e 	bl	800175c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e1e6      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x10c>
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d063      	beq.n	8001f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4a:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d11c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x18c>
 8001e62:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d116      	bne.n	8001e9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_RCC_OscConfig+0x176>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e1ba      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4939      	ldr	r1, [pc, #228]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	e03a      	b.n	8001f12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff fc57 	bl	800175c <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fc53 	bl	800175c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e19b      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4927      	ldr	r1, [pc, #156]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
 8001ee4:	e015      	b.n	8001f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff fc36 	bl	800175c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fc32 	bl	800175c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e17a      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d03a      	beq.n	8001f94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d019      	beq.n	8001f5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fc16 	bl	800175c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f34:	f7ff fc12 	bl	800175c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e15a      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f000 faa6 	bl	80024a4 <RCC_Delay>
 8001f58:	e01c      	b.n	8001f94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7ff fbfc 	bl	800175c <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f66:	e00f      	b.n	8001f88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f68:	f7ff fbf8 	bl	800175c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d908      	bls.n	8001f88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e140      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	42420000 	.word	0x42420000
 8001f84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	4b9e      	ldr	r3, [pc, #632]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e9      	bne.n	8001f68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80a6 	beq.w	80020ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa6:	4b97      	ldr	r3, [pc, #604]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10d      	bne.n	8001fce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b94      	ldr	r3, [pc, #592]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a93      	ldr	r2, [pc, #588]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b91      	ldr	r3, [pc, #580]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fce:	4b8e      	ldr	r3, [pc, #568]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d118      	bne.n	800200c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fda:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a8a      	ldr	r2, [pc, #552]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fbb9 	bl	800175c <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fee:	f7ff fbb5 	bl	800175c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b64      	cmp	r3, #100	; 0x64
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0fd      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x312>
 8002014:	4b7b      	ldr	r3, [pc, #492]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a7a      	ldr	r2, [pc, #488]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	e02d      	b.n	800207e <HAL_RCC_OscConfig+0x36e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x334>
 800202a:	4b76      	ldr	r3, [pc, #472]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a75      	ldr	r2, [pc, #468]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a72      	ldr	r2, [pc, #456]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	f023 0304 	bic.w	r3, r3, #4
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	e01c      	b.n	800207e <HAL_RCC_OscConfig+0x36e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d10c      	bne.n	8002066 <HAL_RCC_OscConfig+0x356>
 800204c:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a6c      	ldr	r2, [pc, #432]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a69      	ldr	r2, [pc, #420]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	e00b      	b.n	800207e <HAL_RCC_OscConfig+0x36e>
 8002066:	4b67      	ldr	r3, [pc, #412]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a66      	ldr	r2, [pc, #408]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a63      	ldr	r2, [pc, #396]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	f023 0304 	bic.w	r3, r3, #4
 800207c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d015      	beq.n	80020b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7ff fb69 	bl	800175c <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7ff fb65 	bl	800175c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e0ab      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a4:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ee      	beq.n	800208e <HAL_RCC_OscConfig+0x37e>
 80020b0:	e014      	b.n	80020dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fb53 	bl	800175c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7ff fb4f 	bl	800175c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e095      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d0:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ee      	bne.n	80020ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b48      	ldr	r3, [pc, #288]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4a47      	ldr	r2, [pc, #284]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8081 	beq.w	80021fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f8:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d061      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d146      	bne.n	800219a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210c:	4b3f      	ldr	r3, [pc, #252]	; (800220c <HAL_RCC_OscConfig+0x4fc>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7ff fb23 	bl	800175c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7ff fb1f 	bl	800175c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e067      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212c:	4b35      	ldr	r3, [pc, #212]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002140:	d108      	bne.n	8002154 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002142:	4b30      	ldr	r3, [pc, #192]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	492d      	ldr	r1, [pc, #180]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a19      	ldr	r1, [r3, #32]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	430b      	orrs	r3, r1
 8002166:	4927      	ldr	r1, [pc, #156]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <HAL_RCC_OscConfig+0x4fc>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7ff faf3 	bl	800175c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217a:	f7ff faef 	bl	800175c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e037      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x46a>
 8002198:	e02f      	b.n	80021fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_RCC_OscConfig+0x4fc>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff fadc 	bl	800175c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff fad8 	bl	800175c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e020      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x498>
 80021c6:	e018      	b.n	80021fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e013      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d001      	beq.n	80021fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	40007000 	.word	0x40007000
 800220c:	42420060 	.word	0x42420060

08002210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0d0      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d910      	bls.n	8002254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 0207 	bic.w	r2, r3, #7
 800223a:	4965      	ldr	r1, [pc, #404]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b8      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002276:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800228e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	494d      	ldr	r1, [pc, #308]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d040      	beq.n	8002330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d115      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e073      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e06b      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4936      	ldr	r1, [pc, #216]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002300:	f7ff fa2c 	bl	800175c <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7ff fa28 	bl	800175c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e053      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d210      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4922      	ldr	r1, [pc, #136]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e032      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4916      	ldr	r1, [pc, #88]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	490e      	ldr	r1, [pc, #56]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800239e:	f000 f821 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	490a      	ldr	r1, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b0:	5ccb      	ldrb	r3, [r1, r3]
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1cc>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1d0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f98a 	bl	80016d8 <HAL_InitTick>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40022000 	.word	0x40022000
 80023d4:	40021000 	.word	0x40021000
 80023d8:	08002d28 	.word	0x08002d28
 80023dc:	2000003c 	.word	0x2000003c
 80023e0:	20000040 	.word	0x20000040

080023e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	b490      	push	{r4, r7}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023ec:	1d3c      	adds	r4, r7, #4
 80023ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023f4:	f240 2301 	movw	r3, #513	; 0x201
 80023f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d002      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x40>
 800241e:	2b08      	cmp	r3, #8
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x46>
 8002422:	e02d      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002426:	623b      	str	r3, [r7, #32]
      break;
 8002428:	e02d      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	0c9b      	lsrs	r3, r3, #18
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002436:	4413      	add	r3, r2
 8002438:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800243c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_RCC_GetSysClockFreq+0xb4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	0c5b      	lsrs	r3, r3, #17
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002456:	4413      	add	r3, r2
 8002458:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800245c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	4a0e      	ldr	r2, [pc, #56]	; (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002462:	fb02 f203 	mul.w	r2, r2, r3
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	e004      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	623b      	str	r3, [r7, #32]
      break;
 800247e:	e002      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002482:	623b      	str	r3, [r7, #32]
      break;
 8002484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002486:	6a3b      	ldr	r3, [r7, #32]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3728      	adds	r7, #40	; 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bc90      	pop	{r4, r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	08002d18 	.word	0x08002d18
 8002498:	40021000 	.word	0x40021000
 800249c:	007a1200 	.word	0x007a1200
 80024a0:	003d0900 	.word	0x003d0900

080024a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <RCC_Delay+0x34>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <RCC_Delay+0x38>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0a5b      	lsrs	r3, r3, #9
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024c0:	bf00      	nop
  }
  while (Delay --);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1e5a      	subs	r2, r3, #1
 80024c6:	60fa      	str	r2, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f9      	bne.n	80024c0 <RCC_Delay+0x1c>
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	2000003c 	.word	0x2000003c
 80024dc:	10624dd3 	.word	0x10624dd3

080024e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e041      	b.n	8002576 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff f84e 	bl	80015a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f000 fa6a 	bl	80029f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d001      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e035      	b.n	8002604 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a16      	ldr	r2, [pc, #88]	; (8002610 <HAL_TIM_Base_Start_IT+0x90>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d009      	beq.n	80025ce <HAL_TIM_Base_Start_IT+0x4e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c2:	d004      	beq.n	80025ce <HAL_TIM_Base_Start_IT+0x4e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_TIM_Base_Start_IT+0x94>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d111      	bne.n	80025f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b06      	cmp	r3, #6
 80025de:	d010      	beq.n	8002602 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	e007      	b.n	8002602 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40012c00 	.word	0x40012c00
 8002614:	40000400 	.word	0x40000400

08002618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b02      	cmp	r3, #2
 800262c:	d122      	bne.n	8002674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	d11b      	bne.n	8002674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0202 	mvn.w	r2, #2
 8002644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f9b1 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 8002660:	e005      	b.n	800266e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f9a4 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f9b3 	bl	80029d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b04      	cmp	r3, #4
 8002680:	d122      	bne.n	80026c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b04      	cmp	r3, #4
 800268e:	d11b      	bne.n	80026c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0204 	mvn.w	r2, #4
 8002698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f987 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f97a 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f989 	bl	80029d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d122      	bne.n	800271c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0208 	mvn.w	r2, #8
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2204      	movs	r2, #4
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f95d 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f950 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f95f 	bl	80029d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b10      	cmp	r3, #16
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b10      	cmp	r3, #16
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0210 	mvn.w	r2, #16
 8002740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2208      	movs	r2, #8
 8002746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f933 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f926 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f935 	bl	80029d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10e      	bne.n	800279c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d107      	bne.n	800279c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0201 	mvn.w	r2, #1
 8002794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fe2c 	bl	80013f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	2b80      	cmp	r3, #128	; 0x80
 80027a8:	d10e      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b4:	2b80      	cmp	r3, #128	; 0x80
 80027b6:	d107      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fa67 	bl	8002c96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d10e      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d107      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8f9 	bl	80029e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b20      	cmp	r3, #32
 8002800:	d10e      	bne.n	8002820 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b20      	cmp	r3, #32
 800280e:	d107      	bne.n	8002820 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0220 	mvn.w	r2, #32
 8002818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fa32 	bl	8002c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_TIM_ConfigClockSource+0x18>
 800283c:	2302      	movs	r3, #2
 800283e:	e0b3      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x180>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800285e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002866:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002878:	d03e      	beq.n	80028f8 <HAL_TIM_ConfigClockSource+0xd0>
 800287a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287e:	f200 8087 	bhi.w	8002990 <HAL_TIM_ConfigClockSource+0x168>
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002886:	f000 8085 	beq.w	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288e:	d87f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x168>
 8002890:	2b70      	cmp	r3, #112	; 0x70
 8002892:	d01a      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xa2>
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d87b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x168>
 8002898:	2b60      	cmp	r3, #96	; 0x60
 800289a:	d050      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x116>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d877      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x168>
 80028a0:	2b50      	cmp	r3, #80	; 0x50
 80028a2:	d03c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0xf6>
 80028a4:	2b50      	cmp	r3, #80	; 0x50
 80028a6:	d873      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x168>
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d058      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x136>
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d86f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x168>
 80028b0:	2b30      	cmp	r3, #48	; 0x30
 80028b2:	d064      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x156>
 80028b4:	2b30      	cmp	r3, #48	; 0x30
 80028b6:	d86b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x168>
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d060      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x156>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d867      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x168>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05c      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x156>
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d05a      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028c8:	e062      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6899      	ldr	r1, [r3, #8]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f000 f95c 	bl	8002b96 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	609a      	str	r2, [r3, #8]
      break;
 80028f6:	e04e      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f000 f945 	bl	8002b96 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291a:	609a      	str	r2, [r3, #8]
      break;
 800291c:	e03b      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	461a      	mov	r2, r3
 800292c:	f000 f8bc 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2150      	movs	r1, #80	; 0x50
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f913 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 800293c:	e02b      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	f000 f8da 	bl	8002b04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2160      	movs	r1, #96	; 0x60
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f903 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 800295c:	e01b      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	461a      	mov	r2, r3
 800296c:	f000 f89c 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2140      	movs	r1, #64	; 0x40
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f8f3 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 800297c:	e00b      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 f8ea 	bl	8002b62 <TIM_ITRx_SetConfig>
        break;
 800298e:	e002      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002990:	bf00      	nop
 8002992:	e000      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002994:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <TIM_Base_SetConfig+0xa8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d007      	beq.n	8002a20 <TIM_Base_SetConfig+0x28>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a16:	d003      	beq.n	8002a20 <TIM_Base_SetConfig+0x28>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <TIM_Base_SetConfig+0xac>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d108      	bne.n	8002a32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <TIM_Base_SetConfig+0xa8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <TIM_Base_SetConfig+0x52>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d003      	beq.n	8002a4a <TIM_Base_SetConfig+0x52>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <TIM_Base_SetConfig+0xac>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d108      	bne.n	8002a5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <TIM_Base_SetConfig+0xa8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d103      	bne.n	8002a90 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	615a      	str	r2, [r3, #20]
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400

08002aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 030a 	bic.w	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f023 0210 	bic.w	r2, r3, #16
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	031b      	lsls	r3, r3, #12
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	621a      	str	r2, [r3, #32]
}
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b085      	sub	sp, #20
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f043 0307 	orr.w	r3, r3, #7
 8002b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b087      	sub	sp, #28
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	021a      	lsls	r2, r3, #8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	609a      	str	r2, [r3, #8]
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e041      	b.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d004      	beq.n	8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a10      	ldr	r2, [pc, #64]	; (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d10c      	bne.n	8002c5e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400

08002c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <__libc_init_array>:
 8002ca8:	b570      	push	{r4, r5, r6, lr}
 8002caa:	2600      	movs	r6, #0
 8002cac:	4d0c      	ldr	r5, [pc, #48]	; (8002ce0 <__libc_init_array+0x38>)
 8002cae:	4c0d      	ldr	r4, [pc, #52]	; (8002ce4 <__libc_init_array+0x3c>)
 8002cb0:	1b64      	subs	r4, r4, r5
 8002cb2:	10a4      	asrs	r4, r4, #2
 8002cb4:	42a6      	cmp	r6, r4
 8002cb6:	d109      	bne.n	8002ccc <__libc_init_array+0x24>
 8002cb8:	f000 f822 	bl	8002d00 <_init>
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	4d0a      	ldr	r5, [pc, #40]	; (8002ce8 <__libc_init_array+0x40>)
 8002cc0:	4c0a      	ldr	r4, [pc, #40]	; (8002cec <__libc_init_array+0x44>)
 8002cc2:	1b64      	subs	r4, r4, r5
 8002cc4:	10a4      	asrs	r4, r4, #2
 8002cc6:	42a6      	cmp	r6, r4
 8002cc8:	d105      	bne.n	8002cd6 <__libc_init_array+0x2e>
 8002cca:	bd70      	pop	{r4, r5, r6, pc}
 8002ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd0:	4798      	blx	r3
 8002cd2:	3601      	adds	r6, #1
 8002cd4:	e7ee      	b.n	8002cb4 <__libc_init_array+0xc>
 8002cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cda:	4798      	blx	r3
 8002cdc:	3601      	adds	r6, #1
 8002cde:	e7f2      	b.n	8002cc6 <__libc_init_array+0x1e>
 8002ce0:	08002d38 	.word	0x08002d38
 8002ce4:	08002d38 	.word	0x08002d38
 8002ce8:	08002d38 	.word	0x08002d38
 8002cec:	08002d3c 	.word	0x08002d3c

08002cf0 <memset>:
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4402      	add	r2, r0
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d100      	bne.n	8002cfa <memset+0xa>
 8002cf8:	4770      	bx	lr
 8002cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002cfe:	e7f9      	b.n	8002cf4 <memset+0x4>

08002d00 <_init>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	bf00      	nop
 8002d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d06:	bc08      	pop	{r3}
 8002d08:	469e      	mov	lr, r3
 8002d0a:	4770      	bx	lr

08002d0c <_fini>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	bf00      	nop
 8002d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d12:	bc08      	pop	{r3}
 8002d14:	469e      	mov	lr, r3
 8002d16:	4770      	bx	lr
