
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d1c  08002d1c  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002d1c  08002d1c  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d1c  08002d1c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000048  08002d6c  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002d6c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e63  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193d  00000000  00000000  00028ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002b220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168bf  00000000  00000000  0002bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acd3  00000000  00000000  000423ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082298  00000000  00000000  0004d0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf36a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002818  00000000  00000000  000cf3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ce4 	.word	0x08002ce4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002ce4 	.word	0x08002ce4

0800014c <MODE_PRESSED>:

int MODE_flag = 0;
int TIME_flag = 0;
int SET_flag = 0;

int MODE_PRESSED() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (MODE_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <MODE_PRESSED+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <MODE_PRESSED+0x16>
		MODE_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <MODE_PRESSED+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <MODE_PRESSED+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000064 	.word	0x20000064

08000170 <TIME_PRESSED>:

int TIME_PRESSED() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (TIME_flag == 1) {
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <TIME_PRESSED+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <TIME_PRESSED+0x16>
		TIME_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <TIME_PRESSED+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <TIME_PRESSED+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000068 	.word	0x20000068

08000194 <SET_PRESSED>:

int SET_PRESSED() {
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (SET_flag == 1) {
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <SET_PRESSED+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <SET_PRESSED+0x16>
		SET_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <SET_PRESSED+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <SET_PRESSED+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000006c 	.word	0x2000006c

080001b8 <getKeyInputMODE>:





void getKeyInputMODE() {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	KeyReg0_MODE = KeyReg1_MODE;
 80001bc:	4b17      	ldr	r3, [pc, #92]	; (800021c <getKeyInputMODE+0x64>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a17      	ldr	r2, [pc, #92]	; (8000220 <getKeyInputMODE+0x68>)
 80001c2:	6013      	str	r3, [r2, #0]
	KeyReg1_MODE = KeyReg2_MODE;
 80001c4:	4b17      	ldr	r3, [pc, #92]	; (8000224 <getKeyInputMODE+0x6c>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a14      	ldr	r2, [pc, #80]	; (800021c <getKeyInputMODE+0x64>)
 80001ca:	6013      	str	r3, [r2, #0]
	KeyReg2_MODE = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 80001cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001d0:	4815      	ldr	r0, [pc, #84]	; (8000228 <getKeyInputMODE+0x70>)
 80001d2:	f001 fd47 	bl	8001c64 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b12      	ldr	r3, [pc, #72]	; (8000224 <getKeyInputMODE+0x6c>)
 80001dc:	601a      	str	r2, [r3, #0]

	if ((KeyReg0_MODE == KeyReg1_MODE) && (KeyReg1_MODE == KeyReg2_MODE)) {
 80001de:	4b10      	ldr	r3, [pc, #64]	; (8000220 <getKeyInputMODE+0x68>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b0e      	ldr	r3, [pc, #56]	; (800021c <getKeyInputMODE+0x64>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d116      	bne.n	8000218 <getKeyInputMODE+0x60>
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <getKeyInputMODE+0x64>)
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <getKeyInputMODE+0x6c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d110      	bne.n	8000218 <getKeyInputMODE+0x60>
		if (KeyReg3_MODE != KeyReg2_MODE) {
 80001f6:	4b0d      	ldr	r3, [pc, #52]	; (800022c <getKeyInputMODE+0x74>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <getKeyInputMODE+0x6c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d00a      	beq.n	8000218 <getKeyInputMODE+0x60>
			KeyReg3_MODE = KeyReg2_MODE;
 8000202:	4b08      	ldr	r3, [pc, #32]	; (8000224 <getKeyInputMODE+0x6c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a09      	ldr	r2, [pc, #36]	; (800022c <getKeyInputMODE+0x74>)
 8000208:	6013      	str	r3, [r2, #0]
			if (KeyReg2_MODE == NORMAL_STATE) {
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <getKeyInputMODE+0x6c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d102      	bne.n	8000218 <getKeyInputMODE+0x60>
				MODE_flag = 1;
 8000212:	4b07      	ldr	r3, [pc, #28]	; (8000230 <getKeyInputMODE+0x78>)
 8000214:	2201      	movs	r2, #1
 8000216:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000004 	.word	0x20000004
 8000220:	20000000 	.word	0x20000000
 8000224:	20000008 	.word	0x20000008
 8000228:	40010800 	.word	0x40010800
 800022c:	2000000c 	.word	0x2000000c
 8000230:	20000064 	.word	0x20000064

08000234 <getKeyInputTIME>:

void getKeyInputTIME() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	KeyReg0_TIME = KeyReg1_TIME;
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <getKeyInputTIME+0x64>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a17      	ldr	r2, [pc, #92]	; (800029c <getKeyInputTIME+0x68>)
 800023e:	6013      	str	r3, [r2, #0]
	KeyReg1_TIME = KeyReg2_TIME;
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <getKeyInputTIME+0x6c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a14      	ldr	r2, [pc, #80]	; (8000298 <getKeyInputTIME+0x64>)
 8000246:	6013      	str	r3, [r2, #0]
	KeyReg2_TIME = HAL_GPIO_ReadPin(BUTTON_TIME_GPIO_Port, BUTTON_TIME_Pin);
 8000248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800024c:	4815      	ldr	r0, [pc, #84]	; (80002a4 <getKeyInputTIME+0x70>)
 800024e:	f001 fd09 	bl	8001c64 <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	461a      	mov	r2, r3
 8000256:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <getKeyInputTIME+0x6c>)
 8000258:	601a      	str	r2, [r3, #0]

	if ((KeyReg0_TIME == KeyReg1_TIME) && (KeyReg1_TIME == KeyReg2_TIME)) {
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <getKeyInputTIME+0x68>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <getKeyInputTIME+0x64>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	429a      	cmp	r2, r3
 8000264:	d116      	bne.n	8000294 <getKeyInputTIME+0x60>
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <getKeyInputTIME+0x64>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <getKeyInputTIME+0x6c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	429a      	cmp	r2, r3
 8000270:	d110      	bne.n	8000294 <getKeyInputTIME+0x60>
		if (KeyReg3_TIME != KeyReg2_TIME) {
 8000272:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <getKeyInputTIME+0x74>)
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <getKeyInputTIME+0x6c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	429a      	cmp	r2, r3
 800027c:	d00a      	beq.n	8000294 <getKeyInputTIME+0x60>
			KeyReg3_TIME = KeyReg2_TIME;
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <getKeyInputTIME+0x6c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a09      	ldr	r2, [pc, #36]	; (80002a8 <getKeyInputTIME+0x74>)
 8000284:	6013      	str	r3, [r2, #0]
			if (KeyReg2_TIME == NORMAL_STATE) {
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <getKeyInputTIME+0x6c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d102      	bne.n	8000294 <getKeyInputTIME+0x60>
				TIME_flag = 1;
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <getKeyInputTIME+0x78>)
 8000290:	2201      	movs	r2, #1
 8000292:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000014 	.word	0x20000014
 800029c:	20000010 	.word	0x20000010
 80002a0:	20000018 	.word	0x20000018
 80002a4:	40010800 	.word	0x40010800
 80002a8:	2000001c 	.word	0x2000001c
 80002ac:	20000068 	.word	0x20000068

080002b0 <getKeyInputSET>:

void getKeyInputSET() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	KeyReg0_SET = KeyReg1_SET;
 80002b4:	4b17      	ldr	r3, [pc, #92]	; (8000314 <getKeyInputSET+0x64>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a17      	ldr	r2, [pc, #92]	; (8000318 <getKeyInputSET+0x68>)
 80002ba:	6013      	str	r3, [r2, #0]
	KeyReg1_SET = KeyReg2_SET;
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <getKeyInputSET+0x6c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a14      	ldr	r2, [pc, #80]	; (8000314 <getKeyInputSET+0x64>)
 80002c2:	6013      	str	r3, [r2, #0]
	KeyReg2_SET = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	4815      	ldr	r0, [pc, #84]	; (8000320 <getKeyInputSET+0x70>)
 80002ca:	f001 fccb 	bl	8001c64 <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <getKeyInputSET+0x6c>)
 80002d4:	601a      	str	r2, [r3, #0]

	if ((KeyReg0_SET == KeyReg1_SET) && (KeyReg1_SET == KeyReg2_SET)) {
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <getKeyInputSET+0x68>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <getKeyInputSET+0x64>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d116      	bne.n	8000310 <getKeyInputSET+0x60>
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <getKeyInputSET+0x64>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <getKeyInputSET+0x6c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d110      	bne.n	8000310 <getKeyInputSET+0x60>
		if (KeyReg3_SET != KeyReg2_SET) {
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <getKeyInputSET+0x74>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <getKeyInputSET+0x6c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d00a      	beq.n	8000310 <getKeyInputSET+0x60>
			KeyReg3_SET = KeyReg2_SET;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <getKeyInputSET+0x6c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a09      	ldr	r2, [pc, #36]	; (8000324 <getKeyInputSET+0x74>)
 8000300:	6013      	str	r3, [r2, #0]
			if (KeyReg2_SET == NORMAL_STATE) {
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <getKeyInputSET+0x6c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d102      	bne.n	8000310 <getKeyInputSET+0x60>
				SET_flag = 1;
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <getKeyInputSET+0x78>)
 800030c:	2201      	movs	r2, #1
 800030e:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000024 	.word	0x20000024
 8000318:	20000020 	.word	0x20000020
 800031c:	20000028 	.word	0x20000028
 8000320:	40010800 	.word	0x40010800
 8000324:	2000002c 	.word	0x2000002c
 8000328:	2000006c 	.word	0x2000006c

0800032c <fsm_run>:
int light1_counter = 0;
int light2_counter = 0;
int s1 = 0, s3 = 0;
int tempRed = 0, tempYellow = 0, tempGreen = 0;

void fsm_run() {
 800032c:	b5b0      	push	{r4, r5, r7, lr}
 800032e:	af00      	add	r7, sp, #0
	switch (status) {
 8000330:	4b90      	ldr	r3, [pc, #576]	; (8000574 <fsm_run+0x248>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b04      	cmp	r3, #4
 8000336:	f200 830b 	bhi.w	8000950 <fsm_run+0x624>
 800033a:	a201      	add	r2, pc, #4	; (adr r2, 8000340 <fsm_run+0x14>)
 800033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000340:	08000355 	.word	0x08000355
 8000344:	080003cf 	.word	0x080003cf
 8000348:	080006c1 	.word	0x080006c1
 800034c:	080007a1 	.word	0x080007a1
 8000350:	080008b5 	.word	0x080008b5
	case RESET:

		setTimer1(30);
 8000354:	201e      	movs	r0, #30
 8000356:	f001 f86d 	bl	8001434 <setTimer1>
		setTimer2(40);
 800035a:	2028      	movs	r0, #40	; 0x28
 800035c:	f001 f886 	bl	800146c <setTimer2>

		status = STATE_MODE_1;
 8000360:	4b84      	ldr	r3, [pc, #528]	; (8000574 <fsm_run+0x248>)
 8000362:	2201      	movs	r2, #1
 8000364:	601a      	str	r2, [r3, #0]
		tempRed = timeRed;
 8000366:	4b84      	ldr	r3, [pc, #528]	; (8000578 <fsm_run+0x24c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a84      	ldr	r2, [pc, #528]	; (800057c <fsm_run+0x250>)
 800036c:	6013      	str	r3, [r2, #0]
		tempGreen = timeGreen;
 800036e:	4b84      	ldr	r3, [pc, #528]	; (8000580 <fsm_run+0x254>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a84      	ldr	r2, [pc, #528]	; (8000584 <fsm_run+0x258>)
 8000374:	6013      	str	r3, [r2, #0]
		tempYellow = timeYellow;
 8000376:	4b84      	ldr	r3, [pc, #528]	; (8000588 <fsm_run+0x25c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a84      	ldr	r2, [pc, #528]	; (800058c <fsm_run+0x260>)
 800037c:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2120      	movs	r1, #32
 8000382:	4883      	ldr	r0, [pc, #524]	; (8000590 <fsm_run+0x264>)
 8000384:	f001 fc85 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2140      	movs	r1, #64	; 0x40
 800038c:	4880      	ldr	r0, [pc, #512]	; (8000590 <fsm_run+0x264>)
 800038e:	f001 fc80 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	487e      	ldr	r0, [pc, #504]	; (8000590 <fsm_run+0x264>)
 8000398:	f001 fc7b 	bl	8001c92 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a2:	487b      	ldr	r0, [pc, #492]	; (8000590 <fsm_run+0x264>)
 80003a4:	f001 fc75 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ae:	4878      	ldr	r0, [pc, #480]	; (8000590 <fsm_run+0x264>)
 80003b0:	f001 fc6f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ba:	4875      	ldr	r0, [pc, #468]	; (8000590 <fsm_run+0x264>)
 80003bc:	f001 fc69 	bl	8001c92 <HAL_GPIO_WritePin>

		light1_counter = 0;
 80003c0:	4b74      	ldr	r3, [pc, #464]	; (8000594 <fsm_run+0x268>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
		light2_counter = 0;
 80003c6:	4b74      	ldr	r3, [pc, #464]	; (8000598 <fsm_run+0x26c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]

		break;
 80003cc:	e2c9      	b.n	8000962 <fsm_run+0x636>
	case STATE_MODE_1:
		total_time = timeRed + timeGreen + timeYellow;
 80003ce:	4b6a      	ldr	r3, [pc, #424]	; (8000578 <fsm_run+0x24c>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b6b      	ldr	r3, [pc, #428]	; (8000580 <fsm_run+0x254>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	441a      	add	r2, r3
 80003d8:	4b6b      	ldr	r3, [pc, #428]	; (8000588 <fsm_run+0x25c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4413      	add	r3, r2
 80003de:	4a6f      	ldr	r2, [pc, #444]	; (800059c <fsm_run+0x270>)
 80003e0:	6013      	str	r3, [r2, #0]
		if (light1_counter == 0) light1_counter = total_time;
 80003e2:	4b6c      	ldr	r3, [pc, #432]	; (8000594 <fsm_run+0x268>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d103      	bne.n	80003f2 <fsm_run+0xc6>
 80003ea:	4b6c      	ldr	r3, [pc, #432]	; (800059c <fsm_run+0x270>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a69      	ldr	r2, [pc, #420]	; (8000594 <fsm_run+0x268>)
 80003f0:	6013      	str	r3, [r2, #0]
		if (light2_counter == 0) light2_counter = total_time;
 80003f2:	4b69      	ldr	r3, [pc, #420]	; (8000598 <fsm_run+0x26c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d103      	bne.n	8000402 <fsm_run+0xd6>
 80003fa:	4b68      	ldr	r3, [pc, #416]	; (800059c <fsm_run+0x270>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a66      	ldr	r2, [pc, #408]	; (8000598 <fsm_run+0x26c>)
 8000400:	6013      	str	r3, [r2, #0]

		if (timeRed < light1_counter && light1_counter <= total_time) {
 8000402:	4b5d      	ldr	r3, [pc, #372]	; (8000578 <fsm_run+0x24c>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	4b63      	ldr	r3, [pc, #396]	; (8000594 <fsm_run+0x268>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	429a      	cmp	r2, r3
 800040c:	da1c      	bge.n	8000448 <fsm_run+0x11c>
 800040e:	4b61      	ldr	r3, [pc, #388]	; (8000594 <fsm_run+0x268>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4b62      	ldr	r3, [pc, #392]	; (800059c <fsm_run+0x270>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	429a      	cmp	r2, r3
 8000418:	dc16      	bgt.n	8000448 <fsm_run+0x11c>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2120      	movs	r1, #32
 800041e:	485c      	ldr	r0, [pc, #368]	; (8000590 <fsm_run+0x264>)
 8000420:	f001 fc37 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2140      	movs	r1, #64	; 0x40
 8000428:	4859      	ldr	r0, [pc, #356]	; (8000590 <fsm_run+0x264>)
 800042a:	f001 fc32 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	4857      	ldr	r0, [pc, #348]	; (8000590 <fsm_run+0x264>)
 8000434:	f001 fc2d 	bl	8001c92 <HAL_GPIO_WritePin>
			s1 = light1_counter - timeRed;
 8000438:	4b56      	ldr	r3, [pc, #344]	; (8000594 <fsm_run+0x268>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b4e      	ldr	r3, [pc, #312]	; (8000578 <fsm_run+0x24c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	4a57      	ldr	r2, [pc, #348]	; (80005a0 <fsm_run+0x274>)
 8000444:	6013      	str	r3, [r2, #0]
 8000446:	e03f      	b.n	80004c8 <fsm_run+0x19c>
		}
		else if (timeYellow < light1_counter && light1_counter <= timeRed) {
 8000448:	4b4f      	ldr	r3, [pc, #316]	; (8000588 <fsm_run+0x25c>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b51      	ldr	r3, [pc, #324]	; (8000594 <fsm_run+0x268>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	429a      	cmp	r2, r3
 8000452:	da1c      	bge.n	800048e <fsm_run+0x162>
 8000454:	4b4f      	ldr	r3, [pc, #316]	; (8000594 <fsm_run+0x268>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	4b47      	ldr	r3, [pc, #284]	; (8000578 <fsm_run+0x24c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	429a      	cmp	r2, r3
 800045e:	dc16      	bgt.n	800048e <fsm_run+0x162>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000460:	2201      	movs	r2, #1
 8000462:	2120      	movs	r1, #32
 8000464:	484a      	ldr	r0, [pc, #296]	; (8000590 <fsm_run+0x264>)
 8000466:	f001 fc14 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2140      	movs	r1, #64	; 0x40
 800046e:	4848      	ldr	r0, [pc, #288]	; (8000590 <fsm_run+0x264>)
 8000470:	f001 fc0f 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2180      	movs	r1, #128	; 0x80
 8000478:	4845      	ldr	r0, [pc, #276]	; (8000590 <fsm_run+0x264>)
 800047a:	f001 fc0a 	bl	8001c92 <HAL_GPIO_WritePin>
			s1 = light1_counter - timeYellow;
 800047e:	4b45      	ldr	r3, [pc, #276]	; (8000594 <fsm_run+0x268>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b41      	ldr	r3, [pc, #260]	; (8000588 <fsm_run+0x25c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	4a45      	ldr	r2, [pc, #276]	; (80005a0 <fsm_run+0x274>)
 800048a:	6013      	str	r3, [r2, #0]
 800048c:	e01c      	b.n	80004c8 <fsm_run+0x19c>
		}
		else if (0 < light1_counter && light1_counter <= timeYellow) {
 800048e:	4b41      	ldr	r3, [pc, #260]	; (8000594 <fsm_run+0x268>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	dd18      	ble.n	80004c8 <fsm_run+0x19c>
 8000496:	4b3f      	ldr	r3, [pc, #252]	; (8000594 <fsm_run+0x268>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	4b3b      	ldr	r3, [pc, #236]	; (8000588 <fsm_run+0x25c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dc12      	bgt.n	80004c8 <fsm_run+0x19c>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	2120      	movs	r1, #32
 80004a6:	483a      	ldr	r0, [pc, #232]	; (8000590 <fsm_run+0x264>)
 80004a8:	f001 fbf3 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2140      	movs	r1, #64	; 0x40
 80004b0:	4837      	ldr	r0, [pc, #220]	; (8000590 <fsm_run+0x264>)
 80004b2:	f001 fbee 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	4835      	ldr	r0, [pc, #212]	; (8000590 <fsm_run+0x264>)
 80004bc:	f001 fbe9 	bl	8001c92 <HAL_GPIO_WritePin>
			s1 = light1_counter;
 80004c0:	4b34      	ldr	r3, [pc, #208]	; (8000594 <fsm_run+0x268>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a36      	ldr	r2, [pc, #216]	; (80005a0 <fsm_run+0x274>)
 80004c6:	6013      	str	r3, [r2, #0]
		}

		if (timeRed + timeYellow < light2_counter && light2_counter <= total_time) {
 80004c8:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <fsm_run+0x24c>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <fsm_run+0x25c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	441a      	add	r2, r3
 80004d2:	4b31      	ldr	r3, [pc, #196]	; (8000598 <fsm_run+0x26c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	da22      	bge.n	8000520 <fsm_run+0x1f4>
 80004da:	4b2f      	ldr	r3, [pc, #188]	; (8000598 <fsm_run+0x26c>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b2f      	ldr	r3, [pc, #188]	; (800059c <fsm_run+0x270>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	dc1c      	bgt.n	8000520 <fsm_run+0x1f4>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ec:	4828      	ldr	r0, [pc, #160]	; (8000590 <fsm_run+0x264>)
 80004ee:	f001 fbd0 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f8:	4825      	ldr	r0, [pc, #148]	; (8000590 <fsm_run+0x264>)
 80004fa:	f001 fbca 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000504:	4822      	ldr	r0, [pc, #136]	; (8000590 <fsm_run+0x264>)
 8000506:	f001 fbc4 	bl	8001c92 <HAL_GPIO_WritePin>
			s3 = light2_counter - timeRed - timeYellow;
 800050a:	4b23      	ldr	r3, [pc, #140]	; (8000598 <fsm_run+0x26c>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <fsm_run+0x24c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1ad2      	subs	r2, r2, r3
 8000514:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <fsm_run+0x25c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <fsm_run+0x278>)
 800051c:	6013      	str	r3, [r2, #0]
 800051e:	e063      	b.n	80005e8 <fsm_run+0x2bc>
		}
		else if (timeRed < light2_counter && light2_counter <= timeRed + timeYellow) {
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <fsm_run+0x24c>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <fsm_run+0x26c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	da3d      	bge.n	80005a8 <fsm_run+0x27c>
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <fsm_run+0x24c>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <fsm_run+0x25c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	441a      	add	r2, r3
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <fsm_run+0x26c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	429a      	cmp	r2, r3
 800053c:	db34      	blt.n	80005a8 <fsm_run+0x27c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	4812      	ldr	r0, [pc, #72]	; (8000590 <fsm_run+0x264>)
 8000546:	f001 fba4 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000550:	480f      	ldr	r0, [pc, #60]	; (8000590 <fsm_run+0x264>)
 8000552:	f001 fb9e 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <fsm_run+0x264>)
 800055e:	f001 fb98 	bl	8001c92 <HAL_GPIO_WritePin>
			s3 = light2_counter - timeRed;
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <fsm_run+0x26c>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <fsm_run+0x24c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <fsm_run+0x278>)
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	e03a      	b.n	80005e8 <fsm_run+0x2bc>
 8000572:	bf00      	nop
 8000574:	20000090 	.word	0x20000090
 8000578:	20000030 	.word	0x20000030
 800057c:	20000084 	.word	0x20000084
 8000580:	20000034 	.word	0x20000034
 8000584:	2000008c 	.word	0x2000008c
 8000588:	20000038 	.word	0x20000038
 800058c:	20000088 	.word	0x20000088
 8000590:	40010800 	.word	0x40010800
 8000594:	20000074 	.word	0x20000074
 8000598:	20000078 	.word	0x20000078
 800059c:	20000070 	.word	0x20000070
 80005a0:	2000007c 	.word	0x2000007c
 80005a4:	20000080 	.word	0x20000080
		}
		else if (0 < light2_counter && light2_counter <= timeRed) {
 80005a8:	4bb5      	ldr	r3, [pc, #724]	; (8000880 <fsm_run+0x554>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	dd1b      	ble.n	80005e8 <fsm_run+0x2bc>
 80005b0:	4bb3      	ldr	r3, [pc, #716]	; (8000880 <fsm_run+0x554>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4bb3      	ldr	r3, [pc, #716]	; (8000884 <fsm_run+0x558>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	dc15      	bgt.n	80005e8 <fsm_run+0x2bc>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c2:	48b1      	ldr	r0, [pc, #708]	; (8000888 <fsm_run+0x55c>)
 80005c4:	f001 fb65 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ce:	48ae      	ldr	r0, [pc, #696]	; (8000888 <fsm_run+0x55c>)
 80005d0:	f001 fb5f 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005da:	48ab      	ldr	r0, [pc, #684]	; (8000888 <fsm_run+0x55c>)
 80005dc:	f001 fb59 	bl	8001c92 <HAL_GPIO_WritePin>
			s3 = light2_counter;
 80005e0:	4ba7      	ldr	r3, [pc, #668]	; (8000880 <fsm_run+0x554>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4aa9      	ldr	r2, [pc, #676]	; (800088c <fsm_run+0x560>)
 80005e6:	6013      	str	r3, [r2, #0]
		}



		updateSEGBuffer(s1/10, s1%10, s3/10, s3%10);
 80005e8:	4ba9      	ldr	r3, [pc, #676]	; (8000890 <fsm_run+0x564>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4aa9      	ldr	r2, [pc, #676]	; (8000894 <fsm_run+0x568>)
 80005ee:	fb82 1203 	smull	r1, r2, r2, r3
 80005f2:	1092      	asrs	r2, r2, #2
 80005f4:	17db      	asrs	r3, r3, #31
 80005f6:	1ad4      	subs	r4, r2, r3
 80005f8:	4ba5      	ldr	r3, [pc, #660]	; (8000890 <fsm_run+0x564>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4ba5      	ldr	r3, [pc, #660]	; (8000894 <fsm_run+0x568>)
 80005fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000602:	1099      	asrs	r1, r3, #2
 8000604:	17d3      	asrs	r3, r2, #31
 8000606:	1ac9      	subs	r1, r1, r3
 8000608:	460b      	mov	r3, r1
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	440b      	add	r3, r1
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	1ad1      	subs	r1, r2, r3
 8000612:	4b9e      	ldr	r3, [pc, #632]	; (800088c <fsm_run+0x560>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a9f      	ldr	r2, [pc, #636]	; (8000894 <fsm_run+0x568>)
 8000618:	fb82 0203 	smull	r0, r2, r2, r3
 800061c:	1092      	asrs	r2, r2, #2
 800061e:	17db      	asrs	r3, r3, #31
 8000620:	1ad5      	subs	r5, r2, r3
 8000622:	4b9a      	ldr	r3, [pc, #616]	; (800088c <fsm_run+0x560>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	4b9b      	ldr	r3, [pc, #620]	; (8000894 <fsm_run+0x568>)
 8000628:	fb83 0302 	smull	r0, r3, r3, r2
 800062c:	1098      	asrs	r0, r3, #2
 800062e:	17d3      	asrs	r3, r2, #31
 8000630:	1ac0      	subs	r0, r0, r3
 8000632:	4603      	mov	r3, r0
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4403      	add	r3, r0
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	1ad0      	subs	r0, r2, r3
 800063c:	4603      	mov	r3, r0
 800063e:	462a      	mov	r2, r5
 8000640:	4620      	mov	r0, r4
 8000642:	f000 fd4b 	bl	80010dc <updateSEGBuffer>

		if (timer1_flag == 1) {
 8000646:	4b94      	ldr	r3, [pc, #592]	; (8000898 <fsm_run+0x56c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d10d      	bne.n	800066a <fsm_run+0x33e>
			light1_counter--;
 800064e:	4b93      	ldr	r3, [pc, #588]	; (800089c <fsm_run+0x570>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3b01      	subs	r3, #1
 8000654:	4a91      	ldr	r2, [pc, #580]	; (800089c <fsm_run+0x570>)
 8000656:	6013      	str	r3, [r2, #0]
			light2_counter--;
 8000658:	4b89      	ldr	r3, [pc, #548]	; (8000880 <fsm_run+0x554>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3b01      	subs	r3, #1
 800065e:	4a88      	ldr	r2, [pc, #544]	; (8000880 <fsm_run+0x554>)
 8000660:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000666:	f000 fee5 	bl	8001434 <setTimer1>
		}



		if (MODE_PRESSED() == 1) {
 800066a:	f7ff fd6f 	bl	800014c <MODE_PRESSED>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	f040 816f 	bne.w	8000954 <fsm_run+0x628>
			status = STATE_MODE_2;
 8000676:	4b8a      	ldr	r3, [pc, #552]	; (80008a0 <fsm_run+0x574>)
 8000678:	2202      	movs	r2, #2
 800067a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000682:	4881      	ldr	r0, [pc, #516]	; (8000888 <fsm_run+0x55c>)
 8000684:	f001 fb05 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068e:	487e      	ldr	r0, [pc, #504]	; (8000888 <fsm_run+0x55c>)
 8000690:	f001 faff 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	487b      	ldr	r0, [pc, #492]	; (8000888 <fsm_run+0x55c>)
 800069a:	f001 fafa 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2120      	movs	r1, #32
 80006a2:	4879      	ldr	r0, [pc, #484]	; (8000888 <fsm_run+0x55c>)
 80006a4:	f001 faf5 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ae:	4876      	ldr	r0, [pc, #472]	; (8000888 <fsm_run+0x55c>)
 80006b0:	f001 faef 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	4873      	ldr	r0, [pc, #460]	; (8000888 <fsm_run+0x55c>)
 80006ba:	f001 faea 	bl	8001c92 <HAL_GPIO_WritePin>
		}
		break;
 80006be:	e149      	b.n	8000954 <fsm_run+0x628>
	case STATE_MODE_2:
		updateSEGBuffer(0, 2, tempRed / 10, tempRed % 10);
 80006c0:	4b78      	ldr	r3, [pc, #480]	; (80008a4 <fsm_run+0x578>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a73      	ldr	r2, [pc, #460]	; (8000894 <fsm_run+0x568>)
 80006c6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ca:	1092      	asrs	r2, r2, #2
 80006cc:	17db      	asrs	r3, r3, #31
 80006ce:	1ad0      	subs	r0, r2, r3
 80006d0:	4b74      	ldr	r3, [pc, #464]	; (80008a4 <fsm_run+0x578>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b6f      	ldr	r3, [pc, #444]	; (8000894 <fsm_run+0x568>)
 80006d6:	fb83 1302 	smull	r1, r3, r3, r2
 80006da:	1099      	asrs	r1, r3, #2
 80006dc:	17d3      	asrs	r3, r2, #31
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	460b      	mov	r3, r1
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	1ad1      	subs	r1, r2, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	4602      	mov	r2, r0
 80006ee:	2102      	movs	r1, #2
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fcf3 	bl	80010dc <updateSEGBuffer>

		if (timer2_flag == 1) {
 80006f6:	4b6c      	ldr	r3, [pc, #432]	; (80008a8 <fsm_run+0x57c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d10b      	bne.n	8000716 <fsm_run+0x3ea>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 80006fe:	2120      	movs	r1, #32
 8000700:	4861      	ldr	r0, [pc, #388]	; (8000888 <fsm_run+0x55c>)
 8000702:	f001 fade 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070a:	485f      	ldr	r0, [pc, #380]	; (8000888 <fsm_run+0x55c>)
 800070c:	f001 fad9 	bl	8001cc2 <HAL_GPIO_TogglePin>
			setTimer2(250);
 8000710:	20fa      	movs	r0, #250	; 0xfa
 8000712:	f000 feab 	bl	800146c <setTimer2>
		}


		if (MODE_PRESSED() == 1) {
 8000716:	f7ff fd19 	bl	800014c <MODE_PRESSED>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	d123      	bne.n	8000768 <fsm_run+0x43c>
			status = STATE_MODE_3;
 8000720:	4b5f      	ldr	r3, [pc, #380]	; (80008a0 <fsm_run+0x574>)
 8000722:	2203      	movs	r2, #3
 8000724:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072c:	4856      	ldr	r0, [pc, #344]	; (8000888 <fsm_run+0x55c>)
 800072e:	f001 fab0 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000738:	4853      	ldr	r0, [pc, #332]	; (8000888 <fsm_run+0x55c>)
 800073a:	f001 faaa 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	4851      	ldr	r0, [pc, #324]	; (8000888 <fsm_run+0x55c>)
 8000744:	f001 faa5 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2120      	movs	r1, #32
 800074c:	484e      	ldr	r0, [pc, #312]	; (8000888 <fsm_run+0x55c>)
 800074e:	f001 faa0 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000758:	484b      	ldr	r0, [pc, #300]	; (8000888 <fsm_run+0x55c>)
 800075a:	f001 fa9a 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	4849      	ldr	r0, [pc, #292]	; (8000888 <fsm_run+0x55c>)
 8000764:	f001 fa95 	bl	8001c92 <HAL_GPIO_WritePin>
		}

		if (TIME_PRESSED() == 1) {
 8000768:	f7ff fd02 	bl	8000170 <TIME_PRESSED>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d10b      	bne.n	800078a <fsm_run+0x45e>
			tempRed++;
 8000772:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <fsm_run+0x578>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	4a4a      	ldr	r2, [pc, #296]	; (80008a4 <fsm_run+0x578>)
 800077a:	6013      	str	r3, [r2, #0]
			if (tempRed > 99) tempRed = 0;
 800077c:	4b49      	ldr	r3, [pc, #292]	; (80008a4 <fsm_run+0x578>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b63      	cmp	r3, #99	; 0x63
 8000782:	dd02      	ble.n	800078a <fsm_run+0x45e>
 8000784:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <fsm_run+0x578>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
		}

		if (SET_PRESSED() == 1) {
 800078a:	f7ff fd03 	bl	8000194 <SET_PRESSED>
 800078e:	4603      	mov	r3, r0
 8000790:	2b01      	cmp	r3, #1
 8000792:	f040 80e1 	bne.w	8000958 <fsm_run+0x62c>
			timeRed = tempRed;
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <fsm_run+0x578>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a3a      	ldr	r2, [pc, #232]	; (8000884 <fsm_run+0x558>)
 800079c:	6013      	str	r3, [r2, #0]
		}
		break;
 800079e:	e0db      	b.n	8000958 <fsm_run+0x62c>
	case STATE_MODE_3:
		updateSEGBuffer(0, 3, tempYellow / 10, tempYellow % 10);
 80007a0:	4b42      	ldr	r3, [pc, #264]	; (80008ac <fsm_run+0x580>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a3b      	ldr	r2, [pc, #236]	; (8000894 <fsm_run+0x568>)
 80007a6:	fb82 1203 	smull	r1, r2, r2, r3
 80007aa:	1092      	asrs	r2, r2, #2
 80007ac:	17db      	asrs	r3, r3, #31
 80007ae:	1ad0      	subs	r0, r2, r3
 80007b0:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <fsm_run+0x580>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b37      	ldr	r3, [pc, #220]	; (8000894 <fsm_run+0x568>)
 80007b6:	fb83 1302 	smull	r1, r3, r3, r2
 80007ba:	1099      	asrs	r1, r3, #2
 80007bc:	17d3      	asrs	r3, r2, #31
 80007be:	1ac9      	subs	r1, r1, r3
 80007c0:	460b      	mov	r3, r1
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	440b      	add	r3, r1
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	1ad1      	subs	r1, r2, r3
 80007ca:	460b      	mov	r3, r1
 80007cc:	4602      	mov	r2, r0
 80007ce:	2103      	movs	r1, #3
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fc83 	bl	80010dc <updateSEGBuffer>

		if (timer2_flag == 1) {
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <fsm_run+0x57c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d10b      	bne.n	80007f6 <fsm_run+0x4ca>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	4829      	ldr	r0, [pc, #164]	; (8000888 <fsm_run+0x55c>)
 80007e2:	f001 fa6e 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 80007e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ea:	4827      	ldr	r0, [pc, #156]	; (8000888 <fsm_run+0x55c>)
 80007ec:	f001 fa69 	bl	8001cc2 <HAL_GPIO_TogglePin>
			setTimer2(250);
 80007f0:	20fa      	movs	r0, #250	; 0xfa
 80007f2:	f000 fe3b 	bl	800146c <setTimer2>
		}

		if (MODE_PRESSED() == 1) {
 80007f6:	f7ff fca9 	bl	800014c <MODE_PRESSED>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d123      	bne.n	8000848 <fsm_run+0x51c>
			status = STATE_MODE_4;
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <fsm_run+0x574>)
 8000802:	2204      	movs	r2, #4
 8000804:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080c:	481e      	ldr	r0, [pc, #120]	; (8000888 <fsm_run+0x55c>)
 800080e:	f001 fa40 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000818:	481b      	ldr	r0, [pc, #108]	; (8000888 <fsm_run+0x55c>)
 800081a:	f001 fa3a 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	4819      	ldr	r0, [pc, #100]	; (8000888 <fsm_run+0x55c>)
 8000824:	f001 fa35 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2120      	movs	r1, #32
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <fsm_run+0x55c>)
 800082e:	f001 fa30 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <fsm_run+0x55c>)
 800083a:	f001 fa2a 	bl	8001c92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <fsm_run+0x55c>)
 8000844:	f001 fa25 	bl	8001c92 <HAL_GPIO_WritePin>
		}

		if (TIME_PRESSED() == 1) {
 8000848:	f7ff fc92 	bl	8000170 <TIME_PRESSED>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d10b      	bne.n	800086a <fsm_run+0x53e>
			tempYellow++;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <fsm_run+0x580>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	4a14      	ldr	r2, [pc, #80]	; (80008ac <fsm_run+0x580>)
 800085a:	6013      	str	r3, [r2, #0]
			if (tempYellow > 99) tempYellow = 0;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <fsm_run+0x580>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b63      	cmp	r3, #99	; 0x63
 8000862:	dd02      	ble.n	800086a <fsm_run+0x53e>
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <fsm_run+0x580>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
		}

		if (SET_PRESSED() == 1) {
 800086a:	f7ff fc93 	bl	8000194 <SET_PRESSED>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d173      	bne.n	800095c <fsm_run+0x630>
			timeYellow = tempYellow;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <fsm_run+0x580>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <fsm_run+0x584>)
 800087a:	6013      	str	r3, [r2, #0]
		}
		break;
 800087c:	e06e      	b.n	800095c <fsm_run+0x630>
 800087e:	bf00      	nop
 8000880:	20000078 	.word	0x20000078
 8000884:	20000030 	.word	0x20000030
 8000888:	40010800 	.word	0x40010800
 800088c:	20000080 	.word	0x20000080
 8000890:	2000007c 	.word	0x2000007c
 8000894:	66666667 	.word	0x66666667
 8000898:	200000b0 	.word	0x200000b0
 800089c:	20000074 	.word	0x20000074
 80008a0:	20000090 	.word	0x20000090
 80008a4:	20000084 	.word	0x20000084
 80008a8:	200000b8 	.word	0x200000b8
 80008ac:	20000088 	.word	0x20000088
 80008b0:	20000038 	.word	0x20000038
	case STATE_MODE_4:
		updateSEGBuffer(0, 4, tempGreen / 10, tempGreen % 10);
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <fsm_run+0x63c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a2c      	ldr	r2, [pc, #176]	; (800096c <fsm_run+0x640>)
 80008ba:	fb82 1203 	smull	r1, r2, r2, r3
 80008be:	1092      	asrs	r2, r2, #2
 80008c0:	17db      	asrs	r3, r3, #31
 80008c2:	1ad0      	subs	r0, r2, r3
 80008c4:	4b28      	ldr	r3, [pc, #160]	; (8000968 <fsm_run+0x63c>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <fsm_run+0x640>)
 80008ca:	fb83 1302 	smull	r1, r3, r3, r2
 80008ce:	1099      	asrs	r1, r3, #2
 80008d0:	17d3      	asrs	r3, r2, #31
 80008d2:	1ac9      	subs	r1, r1, r3
 80008d4:	460b      	mov	r3, r1
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	1ad1      	subs	r1, r2, r3
 80008de:	460b      	mov	r3, r1
 80008e0:	4602      	mov	r2, r0
 80008e2:	2104      	movs	r1, #4
 80008e4:	2000      	movs	r0, #0
 80008e6:	f000 fbf9 	bl	80010dc <updateSEGBuffer>

		if (timer2_flag == 1) {
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <fsm_run+0x644>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <fsm_run+0x5de>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	481f      	ldr	r0, [pc, #124]	; (8000974 <fsm_run+0x648>)
 80008f6:	f001 f9e4 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 80008fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fe:	481d      	ldr	r0, [pc, #116]	; (8000974 <fsm_run+0x648>)
 8000900:	f001 f9df 	bl	8001cc2 <HAL_GPIO_TogglePin>
			setTimer2(250);
 8000904:	20fa      	movs	r0, #250	; 0xfa
 8000906:	f000 fdb1 	bl	800146c <setTimer2>
		}

		if (MODE_PRESSED() == 1) {
 800090a:	f7ff fc1f 	bl	800014c <MODE_PRESSED>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d102      	bne.n	800091a <fsm_run+0x5ee>
			status = RESET;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <fsm_run+0x64c>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
		}

		if (TIME_PRESSED() == 1) {
 800091a:	f7ff fc29 	bl	8000170 <TIME_PRESSED>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	d10b      	bne.n	800093c <fsm_run+0x610>
			tempGreen++;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <fsm_run+0x63c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <fsm_run+0x63c>)
 800092c:	6013      	str	r3, [r2, #0]
			if (tempGreen > 99) tempGreen = 0;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <fsm_run+0x63c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b63      	cmp	r3, #99	; 0x63
 8000934:	dd02      	ble.n	800093c <fsm_run+0x610>
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <fsm_run+0x63c>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
		}

		if (SET_PRESSED() == 1) {
 800093c:	f7ff fc2a 	bl	8000194 <SET_PRESSED>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d10c      	bne.n	8000960 <fsm_run+0x634>
			timeGreen = tempGreen;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <fsm_run+0x63c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <fsm_run+0x650>)
 800094c:	6013      	str	r3, [r2, #0]
		}
		break;
 800094e:	e007      	b.n	8000960 <fsm_run+0x634>
	default:
		break;
 8000950:	bf00      	nop
 8000952:	e006      	b.n	8000962 <fsm_run+0x636>
		break;
 8000954:	bf00      	nop
 8000956:	e004      	b.n	8000962 <fsm_run+0x636>
		break;
 8000958:	bf00      	nop
 800095a:	e002      	b.n	8000962 <fsm_run+0x636>
		break;
 800095c:	bf00      	nop
 800095e:	e000      	b.n	8000962 <fsm_run+0x636>
		break;
 8000960:	bf00      	nop
	}
}
 8000962:	bf00      	nop
 8000964:	bdb0      	pop	{r4, r5, r7, pc}
 8000966:	bf00      	nop
 8000968:	2000008c 	.word	0x2000008c
 800096c:	66666667 	.word	0x66666667
 8000970:	200000b8 	.word	0x200000b8
 8000974:	40010800 	.word	0x40010800
 8000978:	20000090 	.word	0x20000090
 800097c:	20000034 	.word	0x20000034

08000980 <display7SEG0>:
 *      Author: BIN
 */

#include "global.h"

void display7SEG0(int num) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d123      	bne.n	80009d6 <display7SEG0+0x56>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2101      	movs	r1, #1
 8000992:	48c0      	ldr	r0, [pc, #768]	; (8000c94 <display7SEG0+0x314>)
 8000994:	f001 f97d 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2102      	movs	r1, #2
 800099c:	48bd      	ldr	r0, [pc, #756]	; (8000c94 <display7SEG0+0x314>)
 800099e:	f001 f978 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2104      	movs	r1, #4
 80009a6:	48bb      	ldr	r0, [pc, #748]	; (8000c94 <display7SEG0+0x314>)
 80009a8:	f001 f973 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2108      	movs	r1, #8
 80009b0:	48b8      	ldr	r0, [pc, #736]	; (8000c94 <display7SEG0+0x314>)
 80009b2:	f001 f96e 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2110      	movs	r1, #16
 80009ba:	48b6      	ldr	r0, [pc, #728]	; (8000c94 <display7SEG0+0x314>)
 80009bc:	f001 f969 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2120      	movs	r1, #32
 80009c4:	48b3      	ldr	r0, [pc, #716]	; (8000c94 <display7SEG0+0x314>)
 80009c6:	f001 f964 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 1);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	48b1      	ldr	r0, [pc, #708]	; (8000c94 <display7SEG0+0x314>)
 80009d0:	f001 f95f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 1);
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 1);
	}
}
 80009d4:	e183      	b.n	8000cde <display7SEG0+0x35e>
	else if (num == 1) {
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d123      	bne.n	8000a24 <display7SEG0+0xa4>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	2101      	movs	r1, #1
 80009e0:	48ac      	ldr	r0, [pc, #688]	; (8000c94 <display7SEG0+0x314>)
 80009e2:	f001 f956 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2102      	movs	r1, #2
 80009ea:	48aa      	ldr	r0, [pc, #680]	; (8000c94 <display7SEG0+0x314>)
 80009ec:	f001 f951 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2104      	movs	r1, #4
 80009f4:	48a7      	ldr	r0, [pc, #668]	; (8000c94 <display7SEG0+0x314>)
 80009f6:	f001 f94c 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 1);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2108      	movs	r1, #8
 80009fe:	48a5      	ldr	r0, [pc, #660]	; (8000c94 <display7SEG0+0x314>)
 8000a00:	f001 f947 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2110      	movs	r1, #16
 8000a08:	48a2      	ldr	r0, [pc, #648]	; (8000c94 <display7SEG0+0x314>)
 8000a0a:	f001 f942 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2120      	movs	r1, #32
 8000a12:	48a0      	ldr	r0, [pc, #640]	; (8000c94 <display7SEG0+0x314>)
 8000a14:	f001 f93d 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	489d      	ldr	r0, [pc, #628]	; (8000c94 <display7SEG0+0x314>)
 8000a1e:	f001 f938 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000a22:	e15c      	b.n	8000cde <display7SEG0+0x35e>
	else if (num == 2) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d123      	bne.n	8000a72 <display7SEG0+0xf2>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4899      	ldr	r0, [pc, #612]	; (8000c94 <display7SEG0+0x314>)
 8000a30:	f001 f92f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2102      	movs	r1, #2
 8000a38:	4896      	ldr	r0, [pc, #600]	; (8000c94 <display7SEG0+0x314>)
 8000a3a:	f001 f92a 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2104      	movs	r1, #4
 8000a42:	4894      	ldr	r0, [pc, #592]	; (8000c94 <display7SEG0+0x314>)
 8000a44:	f001 f925 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2108      	movs	r1, #8
 8000a4c:	4891      	ldr	r0, [pc, #580]	; (8000c94 <display7SEG0+0x314>)
 8000a4e:	f001 f920 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2110      	movs	r1, #16
 8000a56:	488f      	ldr	r0, [pc, #572]	; (8000c94 <display7SEG0+0x314>)
 8000a58:	f001 f91b 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2120      	movs	r1, #32
 8000a60:	488c      	ldr	r0, [pc, #560]	; (8000c94 <display7SEG0+0x314>)
 8000a62:	f001 f916 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2140      	movs	r1, #64	; 0x40
 8000a6a:	488a      	ldr	r0, [pc, #552]	; (8000c94 <display7SEG0+0x314>)
 8000a6c:	f001 f911 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000a70:	e135      	b.n	8000cde <display7SEG0+0x35e>
	else if (num == 3) {
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d123      	bne.n	8000ac0 <display7SEG0+0x140>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4885      	ldr	r0, [pc, #532]	; (8000c94 <display7SEG0+0x314>)
 8000a7e:	f001 f908 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	4883      	ldr	r0, [pc, #524]	; (8000c94 <display7SEG0+0x314>)
 8000a88:	f001 f903 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4880      	ldr	r0, [pc, #512]	; (8000c94 <display7SEG0+0x314>)
 8000a92:	f001 f8fe 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2108      	movs	r1, #8
 8000a9a:	487e      	ldr	r0, [pc, #504]	; (8000c94 <display7SEG0+0x314>)
 8000a9c:	f001 f8f9 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	487b      	ldr	r0, [pc, #492]	; (8000c94 <display7SEG0+0x314>)
 8000aa6:	f001 f8f4 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2120      	movs	r1, #32
 8000aae:	4879      	ldr	r0, [pc, #484]	; (8000c94 <display7SEG0+0x314>)
 8000ab0:	f001 f8ef 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	4876      	ldr	r0, [pc, #472]	; (8000c94 <display7SEG0+0x314>)
 8000aba:	f001 f8ea 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000abe:	e10e      	b.n	8000cde <display7SEG0+0x35e>
	else if (num == 4) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d123      	bne.n	8000b0e <display7SEG0+0x18e>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 1);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4872      	ldr	r0, [pc, #456]	; (8000c94 <display7SEG0+0x314>)
 8000acc:	f001 f8e1 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	486f      	ldr	r0, [pc, #444]	; (8000c94 <display7SEG0+0x314>)
 8000ad6:	f001 f8dc 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2104      	movs	r1, #4
 8000ade:	486d      	ldr	r0, [pc, #436]	; (8000c94 <display7SEG0+0x314>)
 8000ae0:	f001 f8d7 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 1);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	486a      	ldr	r0, [pc, #424]	; (8000c94 <display7SEG0+0x314>)
 8000aea:	f001 f8d2 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2110      	movs	r1, #16
 8000af2:	4868      	ldr	r0, [pc, #416]	; (8000c94 <display7SEG0+0x314>)
 8000af4:	f001 f8cd 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2120      	movs	r1, #32
 8000afc:	4865      	ldr	r0, [pc, #404]	; (8000c94 <display7SEG0+0x314>)
 8000afe:	f001 f8c8 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2140      	movs	r1, #64	; 0x40
 8000b06:	4863      	ldr	r0, [pc, #396]	; (8000c94 <display7SEG0+0x314>)
 8000b08:	f001 f8c3 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000b0c:	e0e7      	b.n	8000cde <display7SEG0+0x35e>
	else if (num == 5) {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b05      	cmp	r3, #5
 8000b12:	d123      	bne.n	8000b5c <display7SEG0+0x1dc>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2101      	movs	r1, #1
 8000b18:	485e      	ldr	r0, [pc, #376]	; (8000c94 <display7SEG0+0x314>)
 8000b1a:	f001 f8ba 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2102      	movs	r1, #2
 8000b22:	485c      	ldr	r0, [pc, #368]	; (8000c94 <display7SEG0+0x314>)
 8000b24:	f001 f8b5 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4859      	ldr	r0, [pc, #356]	; (8000c94 <display7SEG0+0x314>)
 8000b2e:	f001 f8b0 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2108      	movs	r1, #8
 8000b36:	4857      	ldr	r0, [pc, #348]	; (8000c94 <display7SEG0+0x314>)
 8000b38:	f001 f8ab 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2110      	movs	r1, #16
 8000b40:	4854      	ldr	r0, [pc, #336]	; (8000c94 <display7SEG0+0x314>)
 8000b42:	f001 f8a6 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2120      	movs	r1, #32
 8000b4a:	4852      	ldr	r0, [pc, #328]	; (8000c94 <display7SEG0+0x314>)
 8000b4c:	f001 f8a1 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2140      	movs	r1, #64	; 0x40
 8000b54:	484f      	ldr	r0, [pc, #316]	; (8000c94 <display7SEG0+0x314>)
 8000b56:	f001 f89c 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000b5a:	e0c0      	b.n	8000cde <display7SEG0+0x35e>
	else if (num == 6) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d123      	bne.n	8000baa <display7SEG0+0x22a>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2101      	movs	r1, #1
 8000b66:	484b      	ldr	r0, [pc, #300]	; (8000c94 <display7SEG0+0x314>)
 8000b68:	f001 f893 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 1);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4848      	ldr	r0, [pc, #288]	; (8000c94 <display7SEG0+0x314>)
 8000b72:	f001 f88e 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4846      	ldr	r0, [pc, #280]	; (8000c94 <display7SEG0+0x314>)
 8000b7c:	f001 f889 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2108      	movs	r1, #8
 8000b84:	4843      	ldr	r0, [pc, #268]	; (8000c94 <display7SEG0+0x314>)
 8000b86:	f001 f884 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2110      	movs	r1, #16
 8000b8e:	4841      	ldr	r0, [pc, #260]	; (8000c94 <display7SEG0+0x314>)
 8000b90:	f001 f87f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2120      	movs	r1, #32
 8000b98:	483e      	ldr	r0, [pc, #248]	; (8000c94 <display7SEG0+0x314>)
 8000b9a:	f001 f87a 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2140      	movs	r1, #64	; 0x40
 8000ba2:	483c      	ldr	r0, [pc, #240]	; (8000c94 <display7SEG0+0x314>)
 8000ba4:	f001 f875 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000ba8:	e099      	b.n	8000cde <display7SEG0+0x35e>
	else if (num == 7) {
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b07      	cmp	r3, #7
 8000bae:	d123      	bne.n	8000bf8 <display7SEG0+0x278>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4837      	ldr	r0, [pc, #220]	; (8000c94 <display7SEG0+0x314>)
 8000bb6:	f001 f86c 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4835      	ldr	r0, [pc, #212]	; (8000c94 <display7SEG0+0x314>)
 8000bc0:	f001 f867 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4832      	ldr	r0, [pc, #200]	; (8000c94 <display7SEG0+0x314>)
 8000bca:	f001 f862 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	4830      	ldr	r0, [pc, #192]	; (8000c94 <display7SEG0+0x314>)
 8000bd4:	f001 f85d 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	482d      	ldr	r0, [pc, #180]	; (8000c94 <display7SEG0+0x314>)
 8000bde:	f001 f858 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2120      	movs	r1, #32
 8000be6:	482b      	ldr	r0, [pc, #172]	; (8000c94 <display7SEG0+0x314>)
 8000be8:	f001 f853 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2140      	movs	r1, #64	; 0x40
 8000bf0:	4828      	ldr	r0, [pc, #160]	; (8000c94 <display7SEG0+0x314>)
 8000bf2:	f001 f84e 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000bf6:	e072      	b.n	8000cde <display7SEG0+0x35e>
	else if (num == 8) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d123      	bne.n	8000c46 <display7SEG0+0x2c6>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2101      	movs	r1, #1
 8000c02:	4824      	ldr	r0, [pc, #144]	; (8000c94 <display7SEG0+0x314>)
 8000c04:	f001 f845 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4821      	ldr	r0, [pc, #132]	; (8000c94 <display7SEG0+0x314>)
 8000c0e:	f001 f840 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2104      	movs	r1, #4
 8000c16:	481f      	ldr	r0, [pc, #124]	; (8000c94 <display7SEG0+0x314>)
 8000c18:	f001 f83b 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2108      	movs	r1, #8
 8000c20:	481c      	ldr	r0, [pc, #112]	; (8000c94 <display7SEG0+0x314>)
 8000c22:	f001 f836 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2110      	movs	r1, #16
 8000c2a:	481a      	ldr	r0, [pc, #104]	; (8000c94 <display7SEG0+0x314>)
 8000c2c:	f001 f831 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2120      	movs	r1, #32
 8000c34:	4817      	ldr	r0, [pc, #92]	; (8000c94 <display7SEG0+0x314>)
 8000c36:	f001 f82c 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	4815      	ldr	r0, [pc, #84]	; (8000c94 <display7SEG0+0x314>)
 8000c40:	f001 f827 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000c44:	e04b      	b.n	8000cde <display7SEG0+0x35e>
	else if (num == 9) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b09      	cmp	r3, #9
 8000c4a:	d125      	bne.n	8000c98 <display7SEG0+0x318>
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <display7SEG0+0x314>)
 8000c52:	f001 f81e 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2102      	movs	r1, #2
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <display7SEG0+0x314>)
 8000c5c:	f001 f819 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2104      	movs	r1, #4
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <display7SEG0+0x314>)
 8000c66:	f001 f814 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <display7SEG0+0x314>)
 8000c70:	f001 f80f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2110      	movs	r1, #16
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <display7SEG0+0x314>)
 8000c7a:	f001 f80a 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2120      	movs	r1, #32
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <display7SEG0+0x314>)
 8000c84:	f001 f805 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2140      	movs	r1, #64	; 0x40
 8000c8c:	4801      	ldr	r0, [pc, #4]	; (8000c94 <display7SEG0+0x314>)
 8000c8e:	f001 f800 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000c92:	e024      	b.n	8000cde <display7SEG0+0x35e>
 8000c94:	40010c00 	.word	0x40010c00
		HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <display7SEG0+0x368>)
 8000c9e:	f000 fff8 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, 1);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <display7SEG0+0x368>)
 8000ca8:	f000 fff3 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2104      	movs	r1, #4
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <display7SEG0+0x368>)
 8000cb2:	f000 ffee 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, 1);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2108      	movs	r1, #8
 8000cba:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <display7SEG0+0x368>)
 8000cbc:	f000 ffe9 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, 1);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <display7SEG0+0x368>)
 8000cc6:	f000 ffe4 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2120      	movs	r1, #32
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <display7SEG0+0x368>)
 8000cd0:	f000 ffdf 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, 1);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <display7SEG0+0x368>)
 8000cda:	f000 ffda 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <display7SEG1>:

void display7SEG1(int num) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d129      	bne.n	8000d4e <display7SEG1+0x62>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	48c8      	ldr	r0, [pc, #800]	; (8001020 <display7SEG1+0x334>)
 8000d00:	f000 ffc7 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0a:	48c5      	ldr	r0, [pc, #788]	; (8001020 <display7SEG1+0x334>)
 8000d0c:	f000 ffc1 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d16:	48c2      	ldr	r0, [pc, #776]	; (8001020 <display7SEG1+0x334>)
 8000d18:	f000 ffbb 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d22:	48bf      	ldr	r0, [pc, #764]	; (8001020 <display7SEG1+0x334>)
 8000d24:	f000 ffb5 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2e:	48bc      	ldr	r0, [pc, #752]	; (8001020 <display7SEG1+0x334>)
 8000d30:	f000 ffaf 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3a:	48b9      	ldr	r0, [pc, #740]	; (8001020 <display7SEG1+0x334>)
 8000d3c:	f000 ffa9 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d46:	48b6      	ldr	r0, [pc, #728]	; (8001020 <display7SEG1+0x334>)
 8000d48:	f000 ffa3 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 1);
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 1);
	}
}
 8000d4c:	e1c0      	b.n	80010d0 <display7SEG1+0x3e4>
	else if (num == 1) {
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d129      	bne.n	8000da8 <display7SEG1+0xbc>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	48b1      	ldr	r0, [pc, #708]	; (8001020 <display7SEG1+0x334>)
 8000d5a:	f000 ff9a 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d64:	48ae      	ldr	r0, [pc, #696]	; (8001020 <display7SEG1+0x334>)
 8000d66:	f000 ff94 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d70:	48ab      	ldr	r0, [pc, #684]	; (8001020 <display7SEG1+0x334>)
 8000d72:	f000 ff8e 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 1);
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7c:	48a8      	ldr	r0, [pc, #672]	; (8001020 <display7SEG1+0x334>)
 8000d7e:	f000 ff88 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d88:	48a5      	ldr	r0, [pc, #660]	; (8001020 <display7SEG1+0x334>)
 8000d8a:	f000 ff82 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d94:	48a2      	ldr	r0, [pc, #648]	; (8001020 <display7SEG1+0x334>)
 8000d96:	f000 ff7c 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da0:	489f      	ldr	r0, [pc, #636]	; (8001020 <display7SEG1+0x334>)
 8000da2:	f000 ff76 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000da6:	e193      	b.n	80010d0 <display7SEG1+0x3e4>
	else if (num == 2) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d129      	bne.n	8000e02 <display7SEG1+0x116>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	489b      	ldr	r0, [pc, #620]	; (8001020 <display7SEG1+0x334>)
 8000db4:	f000 ff6d 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbe:	4898      	ldr	r0, [pc, #608]	; (8001020 <display7SEG1+0x334>)
 8000dc0:	f000 ff67 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 1);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dca:	4895      	ldr	r0, [pc, #596]	; (8001020 <display7SEG1+0x334>)
 8000dcc:	f000 ff61 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd6:	4892      	ldr	r0, [pc, #584]	; (8001020 <display7SEG1+0x334>)
 8000dd8:	f000 ff5b 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de2:	488f      	ldr	r0, [pc, #572]	; (8001020 <display7SEG1+0x334>)
 8000de4:	f000 ff55 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dee:	488c      	ldr	r0, [pc, #560]	; (8001020 <display7SEG1+0x334>)
 8000df0:	f000 ff4f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfa:	4889      	ldr	r0, [pc, #548]	; (8001020 <display7SEG1+0x334>)
 8000dfc:	f000 ff49 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000e00:	e166      	b.n	80010d0 <display7SEG1+0x3e4>
	else if (num == 3) {
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d129      	bne.n	8000e5c <display7SEG1+0x170>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	4884      	ldr	r0, [pc, #528]	; (8001020 <display7SEG1+0x334>)
 8000e0e:	f000 ff40 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e18:	4881      	ldr	r0, [pc, #516]	; (8001020 <display7SEG1+0x334>)
 8000e1a:	f000 ff3a 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e24:	487e      	ldr	r0, [pc, #504]	; (8001020 <display7SEG1+0x334>)
 8000e26:	f000 ff34 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e30:	487b      	ldr	r0, [pc, #492]	; (8001020 <display7SEG1+0x334>)
 8000e32:	f000 ff2e 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e3c:	4878      	ldr	r0, [pc, #480]	; (8001020 <display7SEG1+0x334>)
 8000e3e:	f000 ff28 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
 8000e42:	2201      	movs	r2, #1
 8000e44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e48:	4875      	ldr	r0, [pc, #468]	; (8001020 <display7SEG1+0x334>)
 8000e4a:	f000 ff22 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e54:	4872      	ldr	r0, [pc, #456]	; (8001020 <display7SEG1+0x334>)
 8000e56:	f000 ff1c 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000e5a:	e139      	b.n	80010d0 <display7SEG1+0x3e4>
	else if (num == 4) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d129      	bne.n	8000eb6 <display7SEG1+0x1ca>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	486e      	ldr	r0, [pc, #440]	; (8001020 <display7SEG1+0x334>)
 8000e68:	f000 ff13 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e72:	486b      	ldr	r0, [pc, #428]	; (8001020 <display7SEG1+0x334>)
 8000e74:	f000 ff0d 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7e:	4868      	ldr	r0, [pc, #416]	; (8001020 <display7SEG1+0x334>)
 8000e80:	f000 ff07 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8a:	4865      	ldr	r0, [pc, #404]	; (8001020 <display7SEG1+0x334>)
 8000e8c:	f000 ff01 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e96:	4862      	ldr	r0, [pc, #392]	; (8001020 <display7SEG1+0x334>)
 8000e98:	f000 fefb 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea2:	485f      	ldr	r0, [pc, #380]	; (8001020 <display7SEG1+0x334>)
 8000ea4:	f000 fef5 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eae:	485c      	ldr	r0, [pc, #368]	; (8001020 <display7SEG1+0x334>)
 8000eb0:	f000 feef 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000eb4:	e10c      	b.n	80010d0 <display7SEG1+0x3e4>
	else if (num == 5) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d129      	bne.n	8000f10 <display7SEG1+0x224>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	4857      	ldr	r0, [pc, #348]	; (8001020 <display7SEG1+0x334>)
 8000ec2:	f000 fee6 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ecc:	4854      	ldr	r0, [pc, #336]	; (8001020 <display7SEG1+0x334>)
 8000ece:	f000 fee0 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed8:	4851      	ldr	r0, [pc, #324]	; (8001020 <display7SEG1+0x334>)
 8000eda:	f000 feda 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee4:	484e      	ldr	r0, [pc, #312]	; (8001020 <display7SEG1+0x334>)
 8000ee6:	f000 fed4 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef0:	484b      	ldr	r0, [pc, #300]	; (8001020 <display7SEG1+0x334>)
 8000ef2:	f000 fece 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000efc:	4848      	ldr	r0, [pc, #288]	; (8001020 <display7SEG1+0x334>)
 8000efe:	f000 fec8 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f08:	4845      	ldr	r0, [pc, #276]	; (8001020 <display7SEG1+0x334>)
 8000f0a:	f000 fec2 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000f0e:	e0df      	b.n	80010d0 <display7SEG1+0x3e4>
	else if (num == 6) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d129      	bne.n	8000f6a <display7SEG1+0x27e>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	4841      	ldr	r0, [pc, #260]	; (8001020 <display7SEG1+0x334>)
 8000f1c:	f000 feb9 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	483e      	ldr	r0, [pc, #248]	; (8001020 <display7SEG1+0x334>)
 8000f28:	f000 feb3 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f32:	483b      	ldr	r0, [pc, #236]	; (8001020 <display7SEG1+0x334>)
 8000f34:	f000 fead 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f3e:	4838      	ldr	r0, [pc, #224]	; (8001020 <display7SEG1+0x334>)
 8000f40:	f000 fea7 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4a:	4835      	ldr	r0, [pc, #212]	; (8001020 <display7SEG1+0x334>)
 8000f4c:	f000 fea1 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f56:	4832      	ldr	r0, [pc, #200]	; (8001020 <display7SEG1+0x334>)
 8000f58:	f000 fe9b 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	482f      	ldr	r0, [pc, #188]	; (8001020 <display7SEG1+0x334>)
 8000f64:	f000 fe95 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000f68:	e0b2      	b.n	80010d0 <display7SEG1+0x3e4>
	else if (num == 7) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	d129      	bne.n	8000fc4 <display7SEG1+0x2d8>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	482a      	ldr	r0, [pc, #168]	; (8001020 <display7SEG1+0x334>)
 8000f76:	f000 fe8c 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f80:	4827      	ldr	r0, [pc, #156]	; (8001020 <display7SEG1+0x334>)
 8000f82:	f000 fe86 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8c:	4824      	ldr	r0, [pc, #144]	; (8001020 <display7SEG1+0x334>)
 8000f8e:	f000 fe80 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 1);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f98:	4821      	ldr	r0, [pc, #132]	; (8001020 <display7SEG1+0x334>)
 8000f9a:	f000 fe7a 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	481e      	ldr	r0, [pc, #120]	; (8001020 <display7SEG1+0x334>)
 8000fa6:	f000 fe74 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb0:	481b      	ldr	r0, [pc, #108]	; (8001020 <display7SEG1+0x334>)
 8000fb2:	f000 fe6e 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbc:	4818      	ldr	r0, [pc, #96]	; (8001020 <display7SEG1+0x334>)
 8000fbe:	f000 fe68 	bl	8001c92 <HAL_GPIO_WritePin>
}
 8000fc2:	e085      	b.n	80010d0 <display7SEG1+0x3e4>
	else if (num == 8) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d12c      	bne.n	8001024 <display7SEG1+0x338>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	4814      	ldr	r0, [pc, #80]	; (8001020 <display7SEG1+0x334>)
 8000fd0:	f000 fe5f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <display7SEG1+0x334>)
 8000fdc:	f000 fe59 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe6:	480e      	ldr	r0, [pc, #56]	; (8001020 <display7SEG1+0x334>)
 8000fe8:	f000 fe53 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <display7SEG1+0x334>)
 8000ff4:	f000 fe4d 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <display7SEG1+0x334>)
 8001000:	f000 fe47 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <display7SEG1+0x334>)
 800100c:	f000 fe41 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001016:	4802      	ldr	r0, [pc, #8]	; (8001020 <display7SEG1+0x334>)
 8001018:	f000 fe3b 	bl	8001c92 <HAL_GPIO_WritePin>
}
 800101c:	e058      	b.n	80010d0 <display7SEG1+0x3e4>
 800101e:	bf00      	nop
 8001020:	40010c00 	.word	0x40010c00
	else if (num == 9) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b09      	cmp	r3, #9
 8001028:	d129      	bne.n	800107e <display7SEG1+0x392>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	482a      	ldr	r0, [pc, #168]	; (80010d8 <display7SEG1+0x3ec>)
 8001030:	f000 fe2f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	4827      	ldr	r0, [pc, #156]	; (80010d8 <display7SEG1+0x3ec>)
 800103c:	f000 fe29 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001046:	4824      	ldr	r0, [pc, #144]	; (80010d8 <display7SEG1+0x3ec>)
 8001048:	f000 fe23 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001052:	4821      	ldr	r0, [pc, #132]	; (80010d8 <display7SEG1+0x3ec>)
 8001054:	f000 fe1d 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105e:	481e      	ldr	r0, [pc, #120]	; (80010d8 <display7SEG1+0x3ec>)
 8001060:	f000 fe17 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106a:	481b      	ldr	r0, [pc, #108]	; (80010d8 <display7SEG1+0x3ec>)
 800106c:	f000 fe11 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001076:	4818      	ldr	r0, [pc, #96]	; (80010d8 <display7SEG1+0x3ec>)
 8001078:	f000 fe0b 	bl	8001c92 <HAL_GPIO_WritePin>
}
 800107c:	e028      	b.n	80010d0 <display7SEG1+0x3e4>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	4815      	ldr	r0, [pc, #84]	; (80010d8 <display7SEG1+0x3ec>)
 8001084:	f000 fe05 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <display7SEG1+0x3ec>)
 8001090:	f000 fdff 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <display7SEG1+0x3ec>)
 800109c:	f000 fdf9 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <display7SEG1+0x3ec>)
 80010a8:	f000 fdf3 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <display7SEG1+0x3ec>)
 80010b4:	f000 fded 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <display7SEG1+0x3ec>)
 80010c0:	f000 fde7 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <display7SEG1+0x3ec>)
 80010cc:	f000 fde1 	bl	8001c92 <HAL_GPIO_WritePin>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40010c00 	.word	0x40010c00

080010dc <updateSEGBuffer>:
int timeYellow = 2;

int SEG_buffer[4] = {0, 0, 0, 0};


void updateSEGBuffer(int s0, int s1, int s2, int s3) {
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
	SEG_buffer[0] = s0;
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <updateSEGBuffer+0x30>)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6013      	str	r3, [r2, #0]
	SEG_buffer[1] = s1;
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <updateSEGBuffer+0x30>)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	6053      	str	r3, [r2, #4]
	SEG_buffer[2] = s2;
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <updateSEGBuffer+0x30>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6093      	str	r3, [r2, #8]
	SEG_buffer[3] = s3;
 80010fc:	4a03      	ldr	r2, [pc, #12]	; (800110c <updateSEGBuffer+0x30>)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	60d3      	str	r3, [r2, #12]
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	20000094 	.word	0x20000094

08001110 <update7SEG>:

void update7SEG(int index) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	switch (index) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <update7SEG+0x16>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d017      	beq.n	8001154 <update7SEG+0x44>
		display7SEG1(SEG_buffer[3]);
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 8001124:	e02d      	b.n	8001182 <update7SEG+0x72>
		display7SEG0(SEG_buffer[0]);
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <update7SEG+0x7c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fc28 	bl	8000980 <display7SEG0>
		display7SEG1(SEG_buffer[1]);
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <update7SEG+0x7c>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fdd9 	bl	8000cec <display7SEG1>
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <update7SEG+0x80>)
 8001142:	f000 fda6 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114c:	4810      	ldr	r0, [pc, #64]	; (8001190 <update7SEG+0x80>)
 800114e:	f000 fda0 	bl	8001c92 <HAL_GPIO_WritePin>
		break;
 8001152:	e016      	b.n	8001182 <update7SEG+0x72>
		display7SEG0(SEG_buffer[2]);
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <update7SEG+0x7c>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fc11 	bl	8000980 <display7SEG0>
		display7SEG1(SEG_buffer[3]);
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <update7SEG+0x7c>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fdc2 	bl	8000cec <display7SEG1>
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <update7SEG+0x80>)
 8001170:	f000 fd8f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <update7SEG+0x80>)
 800117c:	f000 fd89 	bl	8001c92 <HAL_GPIO_WritePin>
		break;
 8001180:	bf00      	nop
	}
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000094 	.word	0x20000094
 8001190:	40010800 	.word	0x40010800

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119a:	f000 fa79 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119e:	f000 f82b 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a2:	f000 f8b1 	bl	8001308 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011a6:	f000 f863 	bl	8001270 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011aa:	4810      	ldr	r0, [pc, #64]	; (80011ec <main+0x58>)
 80011ac:	f001 f9da 	bl	8002564 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = 0;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <main+0x5c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
  int index = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  setTimer0(10);
 80011ba:	200a      	movs	r0, #10
 80011bc:	f000 f91e 	bl	80013fc <setTimer0>
  while (1)
  {

	  if (timer0_flag == 1) {
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <main+0x60>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d10e      	bne.n	80011e6 <main+0x52>
		  update7SEG(index);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffa1 	bl	8001110 <update7SEG>
		  index++;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
		  if (index == 2) index = 0;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d101      	bne.n	80011de <main+0x4a>
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
		  setTimer0(500);
 80011de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e2:	f000 f90b 	bl	80013fc <setTimer0>
	  }
	  fsm_run();
 80011e6:	f7ff f8a1 	bl	800032c <fsm_run>
	  if (timer0_flag == 1) {
 80011ea:	e7e9      	b.n	80011c0 <main+0x2c>
 80011ec:	200000bc 	.word	0x200000bc
 80011f0:	20000090 	.word	0x20000090
 80011f4:	200000a8 	.word	0x200000a8

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b090      	sub	sp, #64	; 0x40
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	2228      	movs	r2, #40	; 0x28
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fd64 	bl	8002cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121e:	2301      	movs	r3, #1
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001222:	2310      	movs	r3, #16
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001226:	2300      	movs	r3, #0
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fd60 	bl	8001cf4 <HAL_RCC_OscConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800123a:	f000 f8d9 	bl	80013f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123e:	230f      	movs	r3, #15
 8001240:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f000 ffcc 	bl	80021f4 <HAL_RCC_ClockConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001262:	f000 f8c5 	bl	80013f0 <Error_Handler>
  }
}
 8001266:	bf00      	nop
 8001268:	3740      	adds	r7, #64	; 0x40
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_TIM2_Init+0x94>)
 800128e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_TIM2_Init+0x94>)
 8001296:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800129a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM2_Init+0x94>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_TIM2_Init+0x94>)
 80012a4:	2209      	movs	r2, #9
 80012a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_TIM2_Init+0x94>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_TIM2_Init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <MX_TIM2_Init+0x94>)
 80012b6:	f001 f905 	bl	80024c4 <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012c0:	f000 f896 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <MX_TIM2_Init+0x94>)
 80012d2:	f001 fa9b 	bl	800280c <HAL_TIM_ConfigClockSource>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012dc:	f000 f888 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_TIM2_Init+0x94>)
 80012ee:	f001 fc63 	bl	8002bb8 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012f8:	f000 f87a 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200000bc 	.word	0x200000bc

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <MX_GPIO_Init+0xbc>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <MX_GPIO_Init+0xbc>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_GPIO_Init+0xbc>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_GPIO_Init+0xbc>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <MX_GPIO_Init+0xbc>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_GPIO_Init+0xbc>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_0_Pin|LED_GREEN_0_Pin|LED_YELLOW_0_Pin|LED_RED_1_Pin
 800134c:	2200      	movs	r2, #0
 800134e:	f24c 71e0 	movw	r1, #51168	; 0xc7e0
 8001352:	481d      	ldr	r0, [pc, #116]	; (80013c8 <MX_GPIO_Init+0xc0>)
 8001354:	f000 fc9d 	bl	8001c92 <HAL_GPIO_WritePin>
                          |LED_GREEN_1_Pin|LED_YELLOW_1_Pin|EN_0_Pin|EN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_0_Pin|SEG_B_0_Pin|SEG_C_0_Pin|SEG_D_1_Pin
 8001358:	2200      	movs	r2, #0
 800135a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800135e:	481b      	ldr	r0, [pc, #108]	; (80013cc <MX_GPIO_Init+0xc4>)
 8001360:	f000 fc97 	bl	8001c92 <HAL_GPIO_WritePin>
                          |SEG_E_0_Pin|SEG_F_0_Pin|SEG_G_0_Pin|SEG_A_1_Pin
                          |SEG_B_1_Pin|SEG_C_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_0_Pin LED_GREEN_0_Pin LED_YELLOW_0_Pin LED_RED_1_Pin
                           LED_GREEN_1_Pin LED_YELLOW_1_Pin EN_0_Pin EN_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_0_Pin|LED_GREEN_0_Pin|LED_YELLOW_0_Pin|LED_RED_1_Pin
 8001364:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
 8001368:	60bb      	str	r3, [r7, #8]
                          |LED_GREEN_1_Pin|LED_YELLOW_1_Pin|EN_0_Pin|EN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2302      	movs	r3, #2
 8001374:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4619      	mov	r1, r3
 800137c:	4812      	ldr	r0, [pc, #72]	; (80013c8 <MX_GPIO_Init+0xc0>)
 800137e:	f000 faf7 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_0_Pin SEG_B_0_Pin SEG_C_0_Pin SEG_D_1_Pin
                           SEG_E_1_Pin SEG_F_1_Pin SEG_G_1_Pin SEG_D_0_Pin
                           SEG_E_0_Pin SEG_F_0_Pin SEG_G_0_Pin SEG_A_1_Pin
                           SEG_B_1_Pin SEG_C_1_Pin */
  GPIO_InitStruct.Pin = SEG_A_0_Pin|SEG_B_0_Pin|SEG_C_0_Pin|SEG_D_1_Pin
 8001382:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001386:	60bb      	str	r3, [r7, #8]
                          |SEG_E_1_Pin|SEG_F_1_Pin|SEG_G_1_Pin|SEG_D_0_Pin
                          |SEG_E_0_Pin|SEG_F_0_Pin|SEG_G_0_Pin|SEG_A_1_Pin
                          |SEG_B_1_Pin|SEG_C_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2302      	movs	r3, #2
 8001392:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4619      	mov	r1, r3
 800139a:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_GPIO_Init+0xc4>)
 800139c:	f000 fae8 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_TIME_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_TIME_Pin|BUTTON_SET_Pin;
 80013a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4619      	mov	r1, r3
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_GPIO_Init+0xc0>)
 80013b6:	f000 fadb 	bl	8001970 <HAL_GPIO_Init>

}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800
 80013cc:	40010c00 	.word	0x40010c00

080013d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	timerRun();
 80013d8:	f000 f864 	bl	80014a4 <timerRun>
	getKeyInputMODE();
 80013dc:	f7fe feec 	bl	80001b8 <getKeyInputMODE>
	getKeyInputSET();
 80013e0:	f7fe ff66 	bl	80002b0 <getKeyInputSET>
	getKeyInputTIME();
 80013e4:	f7fe ff26 	bl	8000234 <getKeyInputTIME>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <setTimer0>:
int timer1_flag = 0;

int timer2_counter = 0;
int timer2_flag = 0;

void setTimer0(int duration) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TICK;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <setTimer0+0x2c>)
 8001408:	fb82 1203 	smull	r1, r2, r2, r3
 800140c:	1092      	asrs	r2, r2, #2
 800140e:	17db      	asrs	r3, r3, #31
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	4a06      	ldr	r2, [pc, #24]	; (800142c <setTimer0+0x30>)
 8001414:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <setTimer0+0x34>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	66666667 	.word	0x66666667
 800142c:	200000a4 	.word	0x200000a4
 8001430:	200000a8 	.word	0x200000a8

08001434 <setTimer1>:

void setTimer1(int duration) {
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <setTimer1+0x2c>)
 8001440:	fb82 1203 	smull	r1, r2, r2, r3
 8001444:	1092      	asrs	r2, r2, #2
 8001446:	17db      	asrs	r3, r3, #31
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <setTimer1+0x30>)
 800144c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <setTimer1+0x34>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	66666667 	.word	0x66666667
 8001464:	200000ac 	.word	0x200000ac
 8001468:	200000b0 	.word	0x200000b0

0800146c <setTimer2>:

void setTimer2(int duration) {
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TICK;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <setTimer2+0x2c>)
 8001478:	fb82 1203 	smull	r1, r2, r2, r3
 800147c:	1092      	asrs	r2, r2, #2
 800147e:	17db      	asrs	r3, r3, #31
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <setTimer2+0x30>)
 8001484:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <setTimer2+0x34>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	66666667 	.word	0x66666667
 800149c:	200000b4 	.word	0x200000b4
 80014a0:	200000b8 	.word	0x200000b8

080014a4 <timerRun>:


void timerRun() {
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <timerRun+0x6c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	dd0b      	ble.n	80014c8 <timerRun+0x24>
		timer0_counter--;
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <timerRun+0x6c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4a16      	ldr	r2, [pc, #88]	; (8001510 <timerRun+0x6c>)
 80014b8:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0) {
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <timerRun+0x6c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	dc02      	bgt.n	80014c8 <timerRun+0x24>
			timer0_flag = 1;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <timerRun+0x70>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer1_counter > 0) {
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <timerRun+0x74>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dd0b      	ble.n	80014e8 <timerRun+0x44>
		timer1_counter--;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <timerRun+0x74>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <timerRun+0x74>)
 80014d8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <timerRun+0x74>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	dc02      	bgt.n	80014e8 <timerRun+0x44>
			timer1_flag = 1;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <timerRun+0x78>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0) {
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <timerRun+0x7c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	dd0b      	ble.n	8001508 <timerRun+0x64>
		timer2_counter--;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <timerRun+0x7c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <timerRun+0x7c>)
 80014f8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <timerRun+0x7c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	dc02      	bgt.n	8001508 <timerRun+0x64>
			timer2_flag = 1;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <timerRun+0x80>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	200000a4 	.word	0x200000a4
 8001514:	200000a8 	.word	0x200000a8
 8001518:	200000ac 	.word	0x200000ac
 800151c:	200000b0 	.word	0x200000b0
 8001520:	200000b4 	.word	0x200000b4
 8001524:	200000b8 	.word	0x200000b8

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_MspInit+0x5c>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a14      	ldr	r2, [pc, #80]	; (8001584 <HAL_MspInit+0x5c>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_MspInit+0x5c>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_MspInit+0x5c>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <HAL_MspInit+0x5c>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_MspInit+0x5c>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_MspInit+0x60>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_MspInit+0x60>)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	40021000 	.word	0x40021000
 8001588:	40010000 	.word	0x40010000

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800159c:	d113      	bne.n	80015c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_TIM_Base_MspInit+0x44>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <HAL_TIM_Base_MspInit+0x44>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_TIM_Base_MspInit+0x44>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	201c      	movs	r0, #28
 80015bc:	f000 f9a1 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c0:	201c      	movs	r0, #28
 80015c2:	f000 f9ba 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161a:	f000 f87f 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM2_IRQHandler+0x10>)
 800162a:	f000 ffe7 	bl	80025fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000bc 	.word	0x200000bc

08001638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	; (800167c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800166a:	f7ff ffe5 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166e:	f001 fb0d 	bl	8002c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001672:	f7ff fd8f 	bl	8001194 <main>
  bx lr
 8001676:	4770      	bx	lr
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001680:	08002d24 	.word	0x08002d24
  ldr r2, =_sbss
 8001684:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001688:	20000108 	.word	0x20000108

0800168c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC1_2_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_Init+0x28>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_Init+0x28>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f000 f923 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a6:	200f      	movs	r0, #15
 80016a8:	f000 f808 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ac:	f7ff ff3c 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40022000 	.word	0x40022000

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f93b 	bl	8001956 <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f000 f903 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x5c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000003c 	.word	0x2000003c
 8001714:	20000044 	.word	0x20000044
 8001718:	20000040 	.word	0x20000040

0800171c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_IncTick+0x1c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_IncTick+0x20>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <HAL_IncTick+0x20>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000044 	.word	0x20000044
 800173c:	20000104 	.word	0x20000104

08001740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <HAL_GetTick+0x10>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	20000104 	.word	0x20000104

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4906      	ldr	r1, [pc, #24]	; (80017ec <__NVIC_EnableIRQ+0x34>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff90 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff2d 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff42 	bl	800179c <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff90 	bl	8001844 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5f 	bl	80017f0 <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff35 	bl	80017b8 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa2 	bl	80018a8 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b08b      	sub	sp, #44	; 0x2c
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	e148      	b.n	8001c16 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001984:	2201      	movs	r2, #1
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8137 	bne.w	8001c10 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4aa3      	ldr	r2, [pc, #652]	; (8001c34 <HAL_GPIO_Init+0x2c4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d05e      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019ac:	4aa1      	ldr	r2, [pc, #644]	; (8001c34 <HAL_GPIO_Init+0x2c4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d875      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019b2:	4aa1      	ldr	r2, [pc, #644]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d058      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019b8:	4a9f      	ldr	r2, [pc, #636]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d86f      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019be:	4a9f      	ldr	r2, [pc, #636]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d052      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019c4:	4a9d      	ldr	r2, [pc, #628]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d869      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019ca:	4a9d      	ldr	r2, [pc, #628]	; (8001c40 <HAL_GPIO_Init+0x2d0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04c      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019d0:	4a9b      	ldr	r2, [pc, #620]	; (8001c40 <HAL_GPIO_Init+0x2d0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d863      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019d6:	4a9b      	ldr	r2, [pc, #620]	; (8001c44 <HAL_GPIO_Init+0x2d4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d046      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019dc:	4a99      	ldr	r2, [pc, #612]	; (8001c44 <HAL_GPIO_Init+0x2d4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d85d      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d82a      	bhi.n	8001a3c <HAL_GPIO_Init+0xcc>
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d859      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <HAL_GPIO_Init+0x80>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001a45 	.word	0x08001a45
 80019f8:	08001a57 	.word	0x08001a57
 80019fc:	08001a99 	.word	0x08001a99
 8001a00:	08001a9f 	.word	0x08001a9f
 8001a04:	08001a9f 	.word	0x08001a9f
 8001a08:	08001a9f 	.word	0x08001a9f
 8001a0c:	08001a9f 	.word	0x08001a9f
 8001a10:	08001a9f 	.word	0x08001a9f
 8001a14:	08001a9f 	.word	0x08001a9f
 8001a18:	08001a9f 	.word	0x08001a9f
 8001a1c:	08001a9f 	.word	0x08001a9f
 8001a20:	08001a9f 	.word	0x08001a9f
 8001a24:	08001a9f 	.word	0x08001a9f
 8001a28:	08001a9f 	.word	0x08001a9f
 8001a2c:	08001a9f 	.word	0x08001a9f
 8001a30:	08001a9f 	.word	0x08001a9f
 8001a34:	08001a4d 	.word	0x08001a4d
 8001a38:	08001a61 	.word	0x08001a61
 8001a3c:	4a82      	ldr	r2, [pc, #520]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d013      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a42:	e02c      	b.n	8001a9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	623b      	str	r3, [r7, #32]
          break;
 8001a4a:	e029      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	3304      	adds	r3, #4
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e024      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	3308      	adds	r3, #8
 8001a5c:	623b      	str	r3, [r7, #32]
          break;
 8001a5e:	e01f      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	330c      	adds	r3, #12
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e01a      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a72:	2304      	movs	r3, #4
 8001a74:	623b      	str	r3, [r7, #32]
          break;
 8001a76:	e013      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	611a      	str	r2, [r3, #16]
          break;
 8001a8a:	e009      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	615a      	str	r2, [r3, #20]
          break;
 8001a96:	e003      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          break;
 8001a9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	d801      	bhi.n	8001aaa <HAL_GPIO_Init+0x13a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	e001      	b.n	8001aae <HAL_GPIO_Init+0x13e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3304      	adds	r3, #4
 8001aae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d802      	bhi.n	8001abc <HAL_GPIO_Init+0x14c>
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	e002      	b.n	8001ac2 <HAL_GPIO_Init+0x152>
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	3b08      	subs	r3, #8
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	210f      	movs	r1, #15
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	6a39      	ldr	r1, [r7, #32]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	431a      	orrs	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8090 	beq.w	8001c10 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af0:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a55      	ldr	r2, [pc, #340]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b08:	4a51      	ldr	r2, [pc, #324]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a49      	ldr	r2, [pc, #292]	; (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00d      	beq.n	8001b50 <HAL_GPIO_Init+0x1e0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <HAL_GPIO_Init+0x1dc>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a47      	ldr	r2, [pc, #284]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_GPIO_Init+0x1d8>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b50:	2300      	movs	r3, #0
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b62:	493b      	ldr	r1, [pc, #236]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4937      	ldr	r1, [pc, #220]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b8a:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4933      	ldr	r1, [pc, #204]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	492d      	ldr	r1, [pc, #180]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4929      	ldr	r1, [pc, #164]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4923      	ldr	r1, [pc, #140]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	491f      	ldr	r1, [pc, #124]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4919      	ldr	r1, [pc, #100]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	4915      	ldr	r1, [pc, #84]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	3301      	adds	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f47f aeaf 	bne.w	8001984 <HAL_GPIO_Init+0x14>
  }
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	372c      	adds	r7, #44	; 0x2c
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	10320000 	.word	0x10320000
 8001c38:	10310000 	.word	0x10310000
 8001c3c:	10220000 	.word	0x10220000
 8001c40:	10210000 	.word	0x10210000
 8001c44:	10120000 	.word	0x10120000
 8001c48:	10110000 	.word	0x10110000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40010800 	.word	0x40010800
 8001c58:	40010c00 	.word	0x40010c00
 8001c5c:	40011000 	.word	0x40011000
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e001      	b.n	8001c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	807b      	strh	r3, [r7, #2]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca2:	787b      	ldrb	r3, [r7, #1]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cae:	e003      	b.n	8001cb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	041a      	lsls	r2, r3, #16
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	611a      	str	r2, [r3, #16]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd4:	887a      	ldrh	r2, [r7, #2]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	041a      	lsls	r2, r3, #16
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	611a      	str	r2, [r3, #16]
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e26c      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8087 	beq.w	8001e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d14:	4b92      	ldr	r3, [pc, #584]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d00c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d20:	4b8f      	ldr	r3, [pc, #572]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d112      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5e>
 8001d2c:	4b8c      	ldr	r3, [pc, #560]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d38:	d10b      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3a:	4b89      	ldr	r3, [pc, #548]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d06c      	beq.n	8001e20 <HAL_RCC_OscConfig+0x12c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d168      	bne.n	8001e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e246      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x76>
 8001d5c:	4b80      	ldr	r3, [pc, #512]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a7f      	ldr	r2, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e02e      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd4>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x98>
 8001d72:	4b7b      	ldr	r3, [pc, #492]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a7a      	ldr	r2, [pc, #488]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b78      	ldr	r3, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a77      	ldr	r2, [pc, #476]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e01d      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0xbc>
 8001d96:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a71      	ldr	r2, [pc, #452]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a6e      	ldr	r2, [pc, #440]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd4>
 8001db0:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a67      	ldr	r2, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fcb6 	bl	8001740 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fcb2 	bl	8001740 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1fa      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe4>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fca2 	bl	8001740 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fc9e 	bl	8001740 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1e6      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x10c>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d063      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e2e:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e3a:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d11c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x18c>
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x176>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e1ba      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4939      	ldr	r1, [pc, #228]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	e03a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fc57 	bl	8001740 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff fc53 	bl	8001740 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e19b      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4927      	ldr	r1, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fc36 	bl	8001740 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fc32 	bl	8001740 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e17a      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d03a      	beq.n	8001f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d019      	beq.n	8001f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7ff fc16 	bl	8001740 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc12 	bl	8001740 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e15a      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f000 faa6 	bl	8002488 <RCC_Delay>
 8001f3c:	e01c      	b.n	8001f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_OscConfig+0x274>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f44:	f7ff fbfc 	bl	8001740 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4a:	e00f      	b.n	8001f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fbf8 	bl	8001740 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d908      	bls.n	8001f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e140      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	42420000 	.word	0x42420000
 8001f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	4b9e      	ldr	r3, [pc, #632]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1e9      	bne.n	8001f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80a6 	beq.w	80020d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b97      	ldr	r3, [pc, #604]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10d      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4b94      	ldr	r3, [pc, #592]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4a93      	ldr	r2, [pc, #588]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	61d3      	str	r3, [r2, #28]
 8001fa2:	4b91      	ldr	r3, [pc, #580]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb2:	4b8e      	ldr	r3, [pc, #568]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d118      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fbe:	4b8b      	ldr	r3, [pc, #556]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a8a      	ldr	r2, [pc, #552]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fca:	f7ff fbb9 	bl	8001740 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7ff fbb5 	bl	8001740 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0fd      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4b81      	ldr	r3, [pc, #516]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x312>
 8001ff8:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a7a      	ldr	r2, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	e02d      	b.n	8002062 <HAL_RCC_OscConfig+0x36e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x334>
 800200e:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a75      	ldr	r2, [pc, #468]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a72      	ldr	r2, [pc, #456]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	e01c      	b.n	8002062 <HAL_RCC_OscConfig+0x36e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b05      	cmp	r3, #5
 800202e:	d10c      	bne.n	800204a <HAL_RCC_OscConfig+0x356>
 8002030:	4b6d      	ldr	r3, [pc, #436]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a6c      	ldr	r2, [pc, #432]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6213      	str	r3, [r2, #32]
 800203c:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	e00b      	b.n	8002062 <HAL_RCC_OscConfig+0x36e>
 800204a:	4b67      	ldr	r3, [pc, #412]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a66      	ldr	r2, [pc, #408]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6213      	str	r3, [r2, #32]
 8002056:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a63      	ldr	r2, [pc, #396]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d015      	beq.n	8002096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7ff fb69 	bl	8001740 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7ff fb65 	bl	8001740 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0ab      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ee      	beq.n	8002072 <HAL_RCC_OscConfig+0x37e>
 8002094:	e014      	b.n	80020c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff fb53 	bl	8001740 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff fb4f 	bl	8001740 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e095      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b4:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ee      	bne.n	800209e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a47      	ldr	r2, [pc, #284]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8081 	beq.w	80021de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020dc:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d061      	beq.n	80021ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d146      	bne.n	800217e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_RCC_OscConfig+0x4fc>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7ff fb23 	bl	8001740 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7ff fb1f 	bl	8001740 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e067      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002110:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002124:	d108      	bne.n	8002138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	492d      	ldr	r1, [pc, #180]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a19      	ldr	r1, [r3, #32]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	430b      	orrs	r3, r1
 800214a:	4927      	ldr	r1, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x4fc>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff faf3 	bl	8001740 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7ff faef 	bl	8001740 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e037      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x46a>
 800217c:	e02f      	b.n	80021de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_RCC_OscConfig+0x4fc>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fadc 	bl	8001740 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff fad8 	bl	8001740 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e020      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x498>
 80021aa:	e018      	b.n	80021de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e013      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	42420060 	.word	0x42420060

080021f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0d0      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b6a      	ldr	r3, [pc, #424]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b67      	ldr	r3, [pc, #412]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4965      	ldr	r1, [pc, #404]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0b8      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002250:	4b59      	ldr	r3, [pc, #356]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4a58      	ldr	r2, [pc, #352]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800225a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002268:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a52      	ldr	r2, [pc, #328]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	494d      	ldr	r1, [pc, #308]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d040      	beq.n	8002314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d107      	bne.n	80022aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d115      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e07f      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e073      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e06b      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4936      	ldr	r1, [pc, #216]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e4:	f7ff fa2c 	bl	8001740 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7ff fa28 	bl	8001740 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e053      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d210      	bcs.n	8002344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4922      	ldr	r1, [pc, #136]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e032      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4916      	ldr	r1, [pc, #88]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002382:	f000 f821 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8002386:	4602      	mov	r2, r0
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	490a      	ldr	r1, [pc, #40]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	5ccb      	ldrb	r3, [r1, r3]
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x1cc>)
 800239c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1d0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f98a 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40022000 	.word	0x40022000
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08002d0c 	.word	0x08002d0c
 80023c0:	2000003c 	.word	0x2000003c
 80023c4:	20000040 	.word	0x20000040

080023c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c8:	b490      	push	{r4, r7}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ce:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023d0:	1d3c      	adds	r4, r7, #4
 80023d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023d8:	f240 2301 	movw	r3, #513	; 0x201
 80023dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d002      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x40>
 8002402:	2b08      	cmp	r3, #8
 8002404:	d003      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x46>
 8002406:	e02d      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800240a:	623b      	str	r3, [r7, #32]
      break;
 800240c:	e02d      	b.n	800246a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	0c9b      	lsrs	r3, r3, #18
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800241a:	4413      	add	r3, r2
 800241c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002420:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_RCC_GetSysClockFreq+0xb4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c5b      	lsrs	r3, r3, #17
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800243a:	4413      	add	r3, r2
 800243c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002440:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002446:	fb02 f203 	mul.w	r2, r2, r3
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	e004      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	623b      	str	r3, [r7, #32]
      break;
 8002462:	e002      	b.n	800246a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002466:	623b      	str	r3, [r7, #32]
      break;
 8002468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246a:	6a3b      	ldr	r3, [r7, #32]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bc90      	pop	{r4, r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	08002cfc 	.word	0x08002cfc
 800247c:	40021000 	.word	0x40021000
 8002480:	007a1200 	.word	0x007a1200
 8002484:	003d0900 	.word	0x003d0900

08002488 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <RCC_Delay+0x34>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <RCC_Delay+0x38>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0a5b      	lsrs	r3, r3, #9
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024a4:	bf00      	nop
  }
  while (Delay --);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1e5a      	subs	r2, r3, #1
 80024aa:	60fa      	str	r2, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f9      	bne.n	80024a4 <RCC_Delay+0x1c>
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	2000003c 	.word	0x2000003c
 80024c0:	10624dd3 	.word	0x10624dd3

080024c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e041      	b.n	800255a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff f84e 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f000 fa6a 	bl	80029dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d001      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e035      	b.n	80025e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_TIM_Base_Start_IT+0x90>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_TIM_Base_Start_IT+0x4e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a6:	d004      	beq.n	80025b2 <HAL_TIM_Base_Start_IT+0x4e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <HAL_TIM_Base_Start_IT+0x94>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d111      	bne.n	80025d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d010      	beq.n	80025e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d4:	e007      	b.n	80025e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40000400 	.word	0x40000400

080025fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b02      	cmp	r3, #2
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0202 	mvn.w	r2, #2
 8002628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f9b1 	bl	80029a6 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f9a4 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f9b3 	bl	80029b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b04      	cmp	r3, #4
 8002664:	d122      	bne.n	80026ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b04      	cmp	r3, #4
 8002672:	d11b      	bne.n	80026ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0204 	mvn.w	r2, #4
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f987 	bl	80029a6 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f97a 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f989 	bl	80029b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d122      	bne.n	8002700 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d11b      	bne.n	8002700 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0208 	mvn.w	r2, #8
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2204      	movs	r2, #4
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f95d 	bl	80029a6 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f950 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f95f 	bl	80029b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b10      	cmp	r3, #16
 800270c:	d122      	bne.n	8002754 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b10      	cmp	r3, #16
 800271a:	d11b      	bne.n	8002754 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0210 	mvn.w	r2, #16
 8002724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2208      	movs	r2, #8
 800272a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f933 	bl	80029a6 <HAL_TIM_IC_CaptureCallback>
 8002740:	e005      	b.n	800274e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f926 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f935 	bl	80029b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10e      	bne.n	8002780 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d107      	bne.n	8002780 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0201 	mvn.w	r2, #1
 8002778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fe28 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278a:	2b80      	cmp	r3, #128	; 0x80
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b80      	cmp	r3, #128	; 0x80
 800279a:	d107      	bne.n	80027ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa67 	bl	8002c7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d107      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8f9 	bl	80029ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0220 	mvn.w	r2, #32
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fa32 	bl	8002c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_TIM_ConfigClockSource+0x18>
 8002820:	2302      	movs	r3, #2
 8002822:	e0b3      	b.n	800298c <HAL_TIM_ConfigClockSource+0x180>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002842:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800284a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285c:	d03e      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0xd0>
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002862:	f200 8087 	bhi.w	8002974 <HAL_TIM_ConfigClockSource+0x168>
 8002866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286a:	f000 8085 	beq.w	8002978 <HAL_TIM_ConfigClockSource+0x16c>
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002872:	d87f      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 8002874:	2b70      	cmp	r3, #112	; 0x70
 8002876:	d01a      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0xa2>
 8002878:	2b70      	cmp	r3, #112	; 0x70
 800287a:	d87b      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 800287c:	2b60      	cmp	r3, #96	; 0x60
 800287e:	d050      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x116>
 8002880:	2b60      	cmp	r3, #96	; 0x60
 8002882:	d877      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 8002884:	2b50      	cmp	r3, #80	; 0x50
 8002886:	d03c      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0xf6>
 8002888:	2b50      	cmp	r3, #80	; 0x50
 800288a:	d873      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d058      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x136>
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d86f      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 8002894:	2b30      	cmp	r3, #48	; 0x30
 8002896:	d064      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x156>
 8002898:	2b30      	cmp	r3, #48	; 0x30
 800289a:	d86b      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 800289c:	2b20      	cmp	r3, #32
 800289e:	d060      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x156>
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d867      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d05c      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x156>
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d05a      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028ac:	e062      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f000 f95c 	bl	8002b7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	609a      	str	r2, [r3, #8]
      break;
 80028da:	e04e      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6899      	ldr	r1, [r3, #8]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f000 f945 	bl	8002b7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028fe:	609a      	str	r2, [r3, #8]
      break;
 8002900:	e03b      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	461a      	mov	r2, r3
 8002910:	f000 f8bc 	bl	8002a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2150      	movs	r1, #80	; 0x50
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f913 	bl	8002b46 <TIM_ITRx_SetConfig>
      break;
 8002920:	e02b      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	461a      	mov	r2, r3
 8002930:	f000 f8da 	bl	8002ae8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2160      	movs	r1, #96	; 0x60
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f903 	bl	8002b46 <TIM_ITRx_SetConfig>
      break;
 8002940:	e01b      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	461a      	mov	r2, r3
 8002950:	f000 f89c 	bl	8002a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2140      	movs	r1, #64	; 0x40
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f8f3 	bl	8002b46 <TIM_ITRx_SetConfig>
      break;
 8002960:	e00b      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	4610      	mov	r0, r2
 800296e:	f000 f8ea 	bl	8002b46 <TIM_ITRx_SetConfig>
        break;
 8002972:	e002      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002978:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <TIM_Base_SetConfig+0xa8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <TIM_Base_SetConfig+0x28>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0x28>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <TIM_Base_SetConfig+0xac>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <TIM_Base_SetConfig+0xa8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <TIM_Base_SetConfig+0x52>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d003      	beq.n	8002a2e <TIM_Base_SetConfig+0x52>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <TIM_Base_SetConfig+0xac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d108      	bne.n	8002a40 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <TIM_Base_SetConfig+0xa8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d103      	bne.n	8002a74 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	615a      	str	r2, [r3, #20]
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	40000400 	.word	0x40000400

08002a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f023 0201 	bic.w	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f023 030a 	bic.w	r3, r3, #10
 8002ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	621a      	str	r2, [r3, #32]
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f023 0210 	bic.w	r2, r3, #16
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	031b      	lsls	r3, r3, #12
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	621a      	str	r2, [r3, #32]
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f043 0307 	orr.w	r3, r3, #7
 8002b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	609a      	str	r2, [r3, #8]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b087      	sub	sp, #28
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	021a      	lsls	r2, r3, #8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	609a      	str	r2, [r3, #8]
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e041      	b.n	8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d009      	beq.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1c:	d004      	beq.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d10c      	bne.n	8002c42 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400

08002c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <__libc_init_array>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	2600      	movs	r6, #0
 8002c90:	4d0c      	ldr	r5, [pc, #48]	; (8002cc4 <__libc_init_array+0x38>)
 8002c92:	4c0d      	ldr	r4, [pc, #52]	; (8002cc8 <__libc_init_array+0x3c>)
 8002c94:	1b64      	subs	r4, r4, r5
 8002c96:	10a4      	asrs	r4, r4, #2
 8002c98:	42a6      	cmp	r6, r4
 8002c9a:	d109      	bne.n	8002cb0 <__libc_init_array+0x24>
 8002c9c:	f000 f822 	bl	8002ce4 <_init>
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	4d0a      	ldr	r5, [pc, #40]	; (8002ccc <__libc_init_array+0x40>)
 8002ca4:	4c0a      	ldr	r4, [pc, #40]	; (8002cd0 <__libc_init_array+0x44>)
 8002ca6:	1b64      	subs	r4, r4, r5
 8002ca8:	10a4      	asrs	r4, r4, #2
 8002caa:	42a6      	cmp	r6, r4
 8002cac:	d105      	bne.n	8002cba <__libc_init_array+0x2e>
 8002cae:	bd70      	pop	{r4, r5, r6, pc}
 8002cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb4:	4798      	blx	r3
 8002cb6:	3601      	adds	r6, #1
 8002cb8:	e7ee      	b.n	8002c98 <__libc_init_array+0xc>
 8002cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cbe:	4798      	blx	r3
 8002cc0:	3601      	adds	r6, #1
 8002cc2:	e7f2      	b.n	8002caa <__libc_init_array+0x1e>
 8002cc4:	08002d1c 	.word	0x08002d1c
 8002cc8:	08002d1c 	.word	0x08002d1c
 8002ccc:	08002d1c 	.word	0x08002d1c
 8002cd0:	08002d20 	.word	0x08002d20

08002cd4 <memset>:
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4402      	add	r2, r0
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d100      	bne.n	8002cde <memset+0xa>
 8002cdc:	4770      	bx	lr
 8002cde:	f803 1b01 	strb.w	r1, [r3], #1
 8002ce2:	e7f9      	b.n	8002cd8 <memset+0x4>

08002ce4 <_init>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	bf00      	nop
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr

08002cf0 <_fini>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr
